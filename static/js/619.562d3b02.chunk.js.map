{"version":3,"file":"static/js/619.562d3b02.chunk.js","mappings":"0IACMA,GAAAA,EAAAA,EAAAA,IAAAA,SAAAA,KAAAA,EAAAA,EAAAA,GAAAA,KAAAA,MAAAA,EAGKC,SAAW,2DAKhBC,GAAAA,EAAAA,EAAAA,IAAAA,SAAAA,KAAAA,EAAAA,EAAAA,GAAAA,KAAAA,MAAAA,EAEKC,kBAAoBH,EAAIC,SAAW,uBAFxCC,EAIKE,gBAAkBJ,EAAIC,SAAW,cAJtCC,EAMKG,mBAAqBL,EAAIC,SAAW,wBANzCC,EAQKI,yBAA2BN,EAAIC,SAAW,8BAR/CC,EAUKK,uBAAyBP,EAAIC,SAAW,0BAV7CC,EAYKM,oBAAsBR,EAAIC,SAAW,gBAZ1CC,EAcKO,wBAA0BT,EAAIC,SAAW,qBAd9CC,EAgBKQ,uBAAyBV,EAAIC,SAAW,0BAhB7CC,EAkBKS,uBAAyBX,EAAIC,SAAW,uBAlB7CC,EAoBKU,oBAAsBZ,EAAIC,SAAW,4BApB1CC,EAsBKW,uBAAyBb,EAAIC,SAAW,0BAtB7CC,EAwBKY,4BAA8Bd,EAAIC,SAAW,+BAxBlDC,EA0BKa,4BAA8Bf,EAAIC,SAAW,8BA1BlDC,EA4BKc,yBAA2BhB,EAAIC,SAAW,oBA5B/CC,EA8BKe,4BAA8BjB,EAAIC,SAAW,qCA9BlDC,EAgCKgB,4BAA8BlB,EAAIC,SAAW,mCAhClDC,EAkCKiB,2BAA6BnB,EAAIC,SAAW,8CAlCjDC,EAoCKkB,iBAAmBpB,EAAIC,SAAW,oBApCvCC,EAsCKmB,yBAA2BrB,EAAIC,SAAW,oBAtC/CC,EAwCKoB,gBAAkBtB,EAAIC,SAAW,oCAxCtCC,EA0CKqB,oBAAsBvB,EAAIC,SAAW,mCA1C1CC,EA4CKsB,mBAAqBxB,EAAIC,SAAW,kCAG/C,O,2DCtDMwB,EAAQC,aAAaC,gBACrBC,GAAUC,EAAAA,EAAAA,GAAWJ,GAEvBK,EAAYF,EAAQG,UACpBC,EAAQJ,EAAQK,MAChBC,EAAKN,EAAQO,GACbC,EAAOR,EAAQS,SACfC,EAASV,EAAQW,YACjBC,EAAOZ,EAAQa,UAEbC,GAAAA,EAAAA,EAAAA,IAAAA,SAAAA,KAAAA,EAAAA,EAAAA,GAAAA,KAAAA,MAAAA,EAEKC,UAAYX,EAFjBU,EAIKE,OAASV,EAJdQ,EAMKG,SAAWT,EANhBM,EAQKI,SAAWN,EARhBE,EAUKK,WAAaT,EAVlBI,EAYKM,SAAWlB,EAItB,O,wKCnBMmB,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GACF,WAAYC,GAAQ,IAAD,yBACjB,cAAMA,IA0BRC,kBAAoB,SAACC,GACjB,EAAKC,SAAS,CAAEC,WAAYF,EAAEG,OAAOC,SA1BvC,EAAKC,MAAQ,CACXtB,GAAG,GACHuB,SAAU,GACVC,aAAc,GACdH,MAAO,GACPI,QAAS,GACTN,WAAY,GACZO,UAAU,GAGZ,EAAKC,SAAW,EAAKA,SAASC,MAAd,WAZC,EA+FlB,OAlFA,gCAED,SAASX,GACPY,KAAKX,UAAL,UAAgBD,EAAEG,OAAOU,KAAOb,EAAEG,OAAOC,UAE1C,uCAED,SAA0BU,GACtBF,KAAKX,SAAS,CACVlB,GAAI+B,EAAU/B,GACduB,SAAUQ,EAAUR,aAE3B,+BAMD,WAAoB,IAAD,OACfS,MAAMjE,EAAAA,EAAAA,kBACLkE,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAE,GACJ,EAAKjB,SAAS,CACZM,aAAeW,EAAKX,aACpBE,UAAU,SAGjB,oBAED,WAEI,OADAU,QAAQC,IAAIR,KAAKP,MAAME,cAEnB,gBAAC,IAAD,iBAAWK,KAAKd,MAAhB,CAAuBuB,KAAK,KAAMC,UAAQ,EAACvC,GAAG,iBAC5C,gBAAC,WAAD,CAAcwC,aAAW,GACvB,gBAAC,UAAD,CAAaxC,GAAG,iCACd,uBAAKyC,UAAU,eAAf,UAAqCZ,KAAKP,MAAMoB,eAGpD,gBAAC,SAAD,KACE,gBAAC,EAAAC,aAAD,CACCC,YAAe,CACdC,KAAM,SACN7C,GAAG,GAAD,OAAK6B,KAAKP,MAAMtB,IAClBuB,SAAS,GAAD,OAAKM,KAAKP,MAAMC,UACxBmB,YAAY,GAAD,OAAKb,KAAKP,MAAME,cAC3BsB,UAAWC,EAAAA,OAAAA,UAAAA,IACXC,SAAU,CACTC,MAAO,CACNC,QAAS,CACRC,UAAU,EACVC,SAAS,MAObC,cACC,IAAIC,IAAI,CACP,CAAC,SAAU,WAAalB,QAAQC,IAAI,mBACpC,CAAC,WAAY,WAAaD,QAAQC,IAAI,qBACtC,CAAC,QAAS,SAAUkB,GAAQnB,QAAQC,IAAIkB,EAAMC,YAIhDC,aAAiB,kBAEjBC,qBAAyB,SAACC,GACzBC,OAAOC,OAASF,WAc7B,EAhGC7C,CAAyBgD,EAAAA,WAmG/B,O,uRCiBA,G,SAvHMC,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GACF,WAAYhD,GAAQ,IAAD,yBACf,cAAMA,IAWVC,kBAAoB,SAACC,GACnB,EAAKC,SAAS,CAAEC,WAAYF,EAAEG,OAAOC,SAXnC,EAAKC,MAAQ,CACX0C,OAAQ,GACRtC,UAAU,EACVP,WAAY,GACZ8C,cAAc,EACdC,eAAe,GAEjB,EAAKC,oBAAsB,EAAKA,oBAAoBvC,MAAzB,WATZ,EAmHlB,OAzGA,2CAMD,SAAoBX,GAChBA,EAAEmD,iBAEFR,OAAOS,SAASC,QAAO,KACxB,+BAEH,WAAoB,IAAD,OACftC,MAAMjE,EAAAA,EAAAA,yBACLkE,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAE,GACJ,EAAKjB,SAAS,CACZ8C,OAAS7B,EAAK6B,OACdtC,UAAU,SAGjB,oBAED,WAAS,IAAD,OACNU,QAAQC,IAAIR,KAAKP,MAAMiD,OACvB,IAAI,EAAuB1C,KAAKP,MAA1BI,EAAN,EAAMA,SAAUsC,EAAhB,EAAgBA,OAKhB,EACmBnC,KAAKP,MAEpBkD,GAHJ,EAAOzE,GAAP,EAAW0E,aAAX,EAAyBC,kBAAzB,EAA4CC,gBAA5C,EAA6DC,cAA7D,EAA4EC,oBAA5E,EAAiG1E,OAAjG,EAAyG2E,OAAzG,EACEC,cAEiBf,EAAOgB,QAAO,SAACC,GAChC,OAAOA,EAAKC,YAAYC,cAAcC,SAAS,EAAK9D,MAAMH,WAAWgE,mBAGvE,OAAIzD,EAKA,2BACI,uBAAKe,UAAU,IACX,+DACA,wBAAMA,UAAU,6DACZ,yBAAOA,UAAU,uBAAuBI,KAAK,OAAOwC,YAAY,wBAAwB,aAAW,SACnG1D,SAAUE,KAAKb,oBAEf,qBAAGsE,MAAM,cAAc,cAAY,WAErC,2BACN,uBAAK7C,UAAU,aACf,gBAAC8C,EAAA,EAAD,CAAOC,OAAK,EAACC,YAAU,EAAChD,UAAU,wCAChC,yBAAOA,UAAU,eACjB,0BACE,yCAEA,qCACA,wCACA,4CACA,yCACA,4CACA,0CACA,+CAGF,6BACC+B,EAAakB,KAAI,SAACT,EAAMU,GAAP,OAClB,sBAAIC,IAAMD,GACR,0BACE,2BAAMV,EAAKC,cAKb,0BACE,2BAAMD,EAAKY,UAEb,0BACE,2BAAMZ,EAAKa,iBAEb,0BACE,2BAAMb,EAAKc,qBAEb,0BACE,2BAAMd,EAAKe,kBAEb,0BACA,2BAAMf,EAAKgB,qBAEX,0BACE,2BAAMhB,EAAKiB,mBAEb,0BACE,2BAAMjB,EAAKkB,wBAzDhB,uBAAK1D,UAAU,WAAU,gBAAC2D,EAAA,EAAD,WAmEnC,EApHCrC,CAAuBD,EAAAA,Y,kGCkI7B,G,SA/HMuC,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GACF,WAAYtF,GAAQ,IAAD,yBACjB,cAAMA,IACDO,MAAQ,CACXgF,UAAW,GACXC,YAAa,GACbC,WAAY,GACZ5G,UAAW,GACX2B,SAAU,GACVkF,YAAa,GACbhF,QAAS,GACTC,UAAU,GAEZ,EAAKgF,iBAAmB,EAAKA,iBAAiB9E,MAAtB,WACxB,EAAKD,SAAW,EAAKA,SAASC,MAAd,WAbC,EA2HlB,OA7GA,gCAED,SAASX,GACPY,KAAKX,UAAL,UAAgBD,EAAEG,OAAOU,KAAOb,EAAEG,OAAOC,UAE1C,+BAED,WAAoB,IAAD,OACfW,MAAMjE,EAAAA,EAAAA,yBAAA,WAAiDwC,EAAAA,EAAAA,WACtD0B,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAE,GACJ,EAAKjB,SAAS,CACZuF,YAActE,EAAKsE,YACnB/E,UAAU,SAGjB,uCAED,SAA0BK,GACtBF,KAAKX,SAAS,CACVoF,UAAWvE,EAAUuE,UACrBC,YAAaxE,EAAUwE,YACvBhF,SAAUQ,EAAUR,aAE3B,8BAED,SAAiBN,GAAG,IAAD,OACjBA,EAAEmD,iBAEF,IAAMuC,EAAqB,CACzBL,UAAWzE,KAAKP,MAAMgF,UACtBC,YAAa1E,KAAKP,MAAMiF,YACxBhF,SAAUM,KAAKP,MAAMC,SACrBiF,WAAY3E,KAAKP,MAAMkF,WACvB5G,UAAU,GAAD,OAAKW,EAAAA,EAAAA,WAGhB6B,QAAQC,IAAIsE,GAEZ3E,MAAMjE,EAAAA,EAAAA,4BAA8C,CAClD6I,OAAQ,OACRC,QAAQ,CACN,OAAU,mBACV,eAAgB,oBAElBC,KAAKC,KAAKC,UAAUL,KAErB1E,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAACgF,GACL,EAAK/F,SAAS,CAACO,QAAUwF,EAAOxF,QAASC,UAAW,IACpDU,QAAQC,IAAI,CAAC,EAAKf,MAAMG,aAE1B,SAACyF,GACC,EAAKhG,SAAS,CAACO,QAAU,8BAE5B,oBAED,WACI,IAAI,EAAsCI,KAAKP,MAApBmF,GAA3B,EAAMU,SAAN,EAAgBC,UAAhB,EAA2BX,aAC3B,OACI,gBAACY,EAAA,EAAD,iBAAWxF,KAAKd,MAAhB,CAAuBuB,KAAK,KAAK,kBAAgB,gCAAgCC,UAAQ,EAACvC,GAAG,iBAC3F,gBAACqH,EAAA,SAAD,CAAc7E,aAAW,GACvB,gBAAC6E,EAAA,QAAD,CAAarH,GAAG,iCACd,uBAAKyC,UAAU,eAAf,4BAGJ,gBAAC4E,EAAA,OAAD,KACE,gBAACC,EAAA,EAAD,CAAWC,KAAG,EAAC9E,UAAU,QACvB,gBAAC+E,EAAA,EAAD,CAAKC,GAAG,MACN,gBAACH,EAAA,EAAD,KACE,gBAACI,EAAA,EAAD,CAAOC,QAAQ,YAAYlF,UAAU,SAArC,eACA,gBAACmF,EAAA,EAAD,CAAO/E,KAAK,OAAOf,KAAK,YAAYT,MAAQQ,KAAKP,MAAMiF,YAAa5E,SAAUE,KAAKF,SAAUkG,UAAQ,OAY3G,gBAACP,EAAA,EAAD,CAAWC,KAAG,EAAC9E,UAAU,QACvB,gBAAC+E,EAAA,EAAD,CAAKC,GAAG,MACN,gBAACH,EAAA,EAAD,KACE,gBAACI,EAAA,EAAD,CAAOC,QAAQ,aAAalF,UAAU,SAAtC,sBACA,gBAACmF,EAAA,EAAD,CAAO/E,KAAK,SAASf,KAAK,aAAaT,MAAOQ,KAAKP,MAAMkF,WAAY7E,SAAUE,KAAKF,UAClF,+BACK8E,EAAYf,KAAI,SAACoC,EAAGnC,GAAJ,OACjB,0BAAQC,IAAOD,GAAQmC,EAAEhI,cAMrC,2BACA,wBAAM2C,UAAU,eAAeZ,KAAKP,MAAMG,UAE5C,gBAAC4F,EAAA,SAAD,KACE,uBAAK5E,UAAU,YACb,gBAACsF,EAAA,EAAD,CAAQC,OAAK,EAACC,MAAM,SAAS3F,KAAK,KAAKG,UAAU,qBAAqByF,QAASrG,KAAKd,MAAMoH,QAA1F,UAEF,uBAAK1F,UAAU,YACb,gBAACsF,EAAA,EAAD,CAAQC,OAAK,EAACC,MAAM,UAAU3F,KAAK,KAAKG,UAAU,sBAAsByF,QAASrG,KAAK6E,kBAAtF,eAKb,EA5HCL,CAA0BvC,EAAAA,YCiKhC,EAhKMsE,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GACF,WAAYrH,GAAQ,IAAD,yBACf,cAAMA,IAYVC,kBAAoB,SAACC,GACnB,EAAKC,SAAS,CAAEC,WAAYF,EAAEG,OAAOC,SAZnC,EAAKC,MAAQ,CACXD,MAAO,GACPK,UAAU,EACVP,WAAY,GACZ8C,cAAc,EACdoE,iBAAiB,EACjBC,sBAAsB,GAExB,EAAKnE,oBAAsB,EAAKA,oBAAoBvC,MAAzB,WAVZ,EA4JlB,OAjJA,2CAMD,SAAoBX,GAChBA,EAAEmD,iBAEFR,OAAOS,SAASC,QAAO,KACxB,+BAEH,WAAoB,IAAD,OACjBtC,MAAMjE,EAAAA,EAAAA,uBAA0C,CAC9C6I,OAAQ,OACRC,QAAQ,CACN,OAAU,mBACV,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CAAC,UAAY,GAAZ,OAAgBzG,EAAAA,EAAAA,YAEvC0B,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAE,GACF,EAAKjB,SAAS,CACVG,MAAQc,EAAKd,MACbK,UAAU,SAGnB,oBAED,WAAS,IAAD,OACNU,QAAQC,IAAIR,KAAKP,MAAMiD,OACvB,IAAI,EAAsB1C,KAAKP,MAAzBI,EAAN,EAAMA,SAAUL,EAAhB,EAAgBA,MAChB,EAAmCQ,KAAKP,MAAjCvB,EAAP,EAAOA,GAAIwI,EAAX,EAAWA,SAAUC,EAArB,EAAqBA,WASfhE,EAAenD,EAAM2D,QAAO,SAACC,GAC/B,OAAOA,EAAKnD,KAAKqD,cAAcC,SAAS,EAAK9D,MAAMH,WAAWgE,kBAGlE,OAAIzD,EAKA,2BACI,uBAAKe,UAAU,IACX,6DACA,wBAAMA,UAAU,6DACZ,yBAAOA,UAAU,uBAAuBI,KAAK,OAAOwC,YAAY,wBAAwB,aAAW,SACnG1D,SAAUE,KAAKb,oBAEf,qBAAGsE,MAAM,cAAc,cAAY,WAErC,2BACN,uBAAK7C,UAAU,aACf,gBAAC8C,EAAA,EAAD,CAAOC,OAAK,EAACC,YAAU,EAAChD,UAAU,wCAChC,yBAAOA,UAAU,eACjB,0BACE,yCACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,yCACA,8CAGF,6BACC+B,EAAakB,KAAI,SAACT,EAAMU,GAAP,OAClB,sBAAIC,IAAMD,GACR,0BACE,2BAAMV,EAAKnD,OAEb,0BACE,6BAEF,0BACE,6BAEF,0BACE,6BAEF,0BACE,6BAEF,0BACE,6BAEF,0BACE,6BAEF,0BACE,6BAEF,0BACE,6BAEF,0BACE,2BACA,gBAAC4F,EAAA,EAAD,CAAOM,OAAK,EAACC,MAAM,OAAO3F,KAAK,KAAKG,UAAU,iCAC9C,gBAAC,EAAAgG,KAAD,CAAMC,GAAI,CAACC,SAAS,eAAgBpH,SAAU0D,EAAK1D,SAAUvB,GAAIiF,EAAKjF,KACpE,0BAAQyC,UAAU,cAAlB,mBAGJ,0BACE,2BACA,gBAACiF,EAAA,EAAD,CAAOM,OAAK,EAACC,MAAM,OAAO3F,KAAK,KAAKG,UAAU,gCAC5CyF,QAAS,WACP,EAAKhH,SAAS,CAACmH,iBAAiB,EAC9BE,SAAUtD,EAAK1D,SAAUxB,GAAIkF,EAAKjF,GAAIwI,WAAYvD,EAAKnD,SAEvD,0BAAQW,UAAU,UAAlB,4BAQZ,gBAAC3B,EAAA,EAAD,CACEd,GAAMD,EACNwB,SAAYgH,EACZK,KAAQ/G,KAAKP,MAAMgH,qBACnBH,OApGkB,kBAAM,EAAKjH,SAAS,CAACoH,sBAAuB,OAsGhE,gBAAC,EAAD,CACEhC,UAAavG,EACbwG,YAAeiC,EACfjH,SAAYgH,EACZK,KAAQ/G,KAAKP,MAAM+G,gBACnBF,OAxGa,kBAAM,EAAKjH,SAAS,CAACmH,iBAAkB,QAUrD,uBAAK5F,UAAU,WAAU,gBAAC2D,EAAA,EAAD,WAkGnC,EA7JCgC,CAA6BtE,EAAAA,W,4CCG/B+E,G,kBAAO,IAAIC,MAGTC,GAFMF,EAAKG,eAAuB,KAAOH,EAAKI,WAAa,IAAIC,OAAO,IAAY,IAAML,EAAKM,WAAWD,OAAO,GAE/GH,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GACJ,WAAYhI,GAAQ,IAAD,yBACjB,cAAMA,IAmBRC,kBAAoB,SAACC,GACnB,EAAKC,SAAS,CAAEC,WAAYF,EAAEG,OAAOC,SAnBrC,EAAKC,MAAQ,CACT8H,QAAS,GACTjI,WAAY,GACZO,UAAU,EACV2H,qBAAqB,EACrBC,kBAAkB,EAClBC,mBAAmB,GAGvB,EAAKC,SAAW,EAAKA,SAAS5H,MAAd,WAChB,EAAK6H,OAAS,EAAKA,OAAO7H,MAAZ,WACd,EAAKD,SAAW,EAAKA,SAASC,MAAd,WAbC,EA+HlB,OAjHA,gCAED,SAASX,GACPY,KAAKX,UAAL,UAAgBD,EAAEG,OAAOU,KAAOb,EAAEG,OAAOC,UAC1C,sBAMD,SAASJ,GACPA,EAAEmD,mBACH,oBAED,SAAOnD,GACLA,EAAEmD,iBACF7E,aAAamK,WAAW,mBACxBnK,aAAaoK,QACb9H,KAAKd,MAAM6I,QAAQC,KAAK,YACzB,+BAED,WAAoB,IAAD,OACjB7H,MAAMjE,EAAAA,EAAAA,4BAAA,WAAoDwC,EAAAA,EAAAA,SAApD,YAAyEA,EAAAA,EAAAA,YAC9E0B,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAE,GACJ,EAAKjB,SAAS,CACZkI,QAAUjH,EAAKiH,QACf1H,UAAU,SAGjB,oBAEC,WAAU,IAAD,OACH,EAAwBG,KAAKP,MAA3BI,EAAN,EAAMA,SAAU0H,EAAhB,EAAgBA,QAChB,EAAmCvH,KAAKP,MAAjCvB,EAAP,EAAOA,GAAIwI,EAAX,EAAWA,SAMP/D,GANJ,EAAqBgE,WAMFY,EAAQpE,QAAO,SAACC,GACjC,OAAOA,EAAKsB,YAAYpB,cAAcC,SAAS,EAAK9D,MAAMH,WAAWgE,mBAGvE,EAAqBtD,KAAKP,MAA1B,EAAOwI,KAAP,EAAa7J,KAEb,OAAIyB,EAKF,uBAAKe,UAAU,kCACb,gBAACsH,EAAA,EAAD,KACA,gBAACC,EAAA,EAAD,KACc,gBAAC,KAAD,KACE,2BAAK,sBAAIvH,UAAU,0BAAd,WAAgDlC,EAAAA,EAAAA,WACrD,2BAAK,sEAEP,2BACA,2BACE,0BAAQkC,UAAU,cAAlB,4BACA,wBAAMA,UAAU,iCACd,yBAAOA,UAAU,uBAAuBI,KAAK,OAAOwC,YAAY,wBAAwB,aAAW,SACjG1D,SAAUE,KAAKb,sBAEf,2BACN,uBAAKyB,UAAU,aACf,gBAAC8C,EAAA,EAAD,CAAOC,OAAK,EAACC,YAAU,EAAChD,UAAU,wCAChC,yBAAOA,UAAU,eACb,0BAEA,uCACA,yCACA,2BACA,2CACA,2CAGJ,6BACC+B,EAAakB,KAAI,SAACuE,EAAUtE,GAAX,OACd,sBAAIC,IAAMD,GACN,0BACI,2BAAMsE,EAASrK,YAEnB,0BACI,2BAAMqK,EAAS1D,cAEnB,0BACI,6BAEJ,0BACI,2BAAM0D,EAASC,aAEnB,0BACA,gBAACxC,EAAA,EAAD,CAAOM,OAAK,EAACC,MAAM,OAAO3F,KAAK,KAAKG,UAAU,iCAC5C,gBAAC,EAAAgG,KAAD,CAAMC,GAAI,CAACC,SAAS,UAAWpH,SAAU0I,EAAS1I,SAAUvB,GAAIiK,EAAS3D,YACxE,0BAAQ7D,UAAU,cAAlB,2BAS3B,gBAAC3B,EAAA,EAAD,CACEd,GAAMD,EACNwB,SAAYgH,EAEZK,KAAQ/G,KAAKP,MAAM+H,oBACnBlB,OA1EgB,kBAAM,EAAKjH,SAAS,CAACmI,qBAAsB,QAWtD,uBAAK5G,UAAU,WAAU,gBAAC2D,EAAA,EAAD,WAkErC,EAhIG2C,CAAoBjF,EAAAA,YAmI1B,GAAeqG,EAAAA,EAAAA,IAAWpB,GCnHpBqB,GAAeC,EAAAA,EAAAA,UAAS,aACxBC,GAAeD,EAAAA,EAAAA,UAAS,aACxBE,GAAYF,EAAAA,EAAAA,UAAS,UAErBG,IADeH,EAAAA,EAAAA,UAAS,cACVA,EAAAA,EAAAA,UAAS,aAGvBI,EAEM,CACR,CACEC,MAAO,mBACPC,gBAAiBP,EACjBQ,YAAa,wBACbC,KAAM,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,MAmD/BC,GA3CMC,EAAAA,eAwBGC,KAAKC,IAAIC,MAAMF,KAAMP,EAAwB,GAAGI,MAChDG,KAAKG,IAAID,MAAMF,KAAMP,EAAwB,GAAGI,MAoBnD,CACR,CACEH,MAAO,mBACPC,gBAAiBJ,EACjBK,YAAa,wBACbC,KAAM,CAAC,EAAG,GAAI,EAAG,GAAI,GAAI,GAAI,OAQvBE,EAAAA,eAwBGC,KAAKC,IAAIC,MAAMF,KAAMF,EAAwB,GAAGD,MAChDG,KAAKG,IAAID,MAAMF,KAAMF,EAAwB,GAAGD,MAiCnDE,EAAAA,eA6CAA,EAAAA,eA+CAA,EAAAA,eA0EAA,EAAAA,eAiCZ,SAASK,EAAOH,EAAKE,GACnB,OAAOH,KAAKK,MAAML,KAAKI,UAAYD,EAAMF,EAAM,GAAKA,GAQtD,IALA,IACIK,EAAQ,GACRC,EAAQ,GACRC,EAAQ,GAEHC,EAAI,EAAGA,GALD,GAKgBA,IAC7BH,EAAMzB,KAAKuB,EAAO,GAAI,MACtBG,EAAM1B,KAAKuB,EAAO,GAAI,MACtBI,EAAM3B,KAAK,KAQU6B,EAAAA,EAAAA,WAAUnB,EAAW,IA6BhCQ,EAAAA,eA0BQC,KAAKW,KAAK,IA5D9B,IAySA,EA9NMC,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GACJ,WAAY7K,GAAQ,IAAD,yBACjB,cAAMA,IA4BR8K,QAAU,kBAAM,uBAAKpJ,UAAU,oCAAf,eA1Bd,EAAKqJ,OAAS,EAAKA,OAAOlK,MAAZ,WACd,EAAKmK,gBAAkB,EAAKA,gBAAgBnK,MAArB,WAEvB,EAAKN,MAAQ,CACX0K,cAAc,EACdC,cAAe,EACfC,cAAe,GACflI,OAAQ,GACRmI,YAAa,GACb1F,YAAa,GACbpF,MAAO,IAbQ,EA0NlB,OA3MA,8BAED,WACEQ,KAAKX,SAAS,CACZ8K,cAAenK,KAAKP,MAAM0K,iBAE7B,6BAED,SAAgBC,GACdpK,KAAKX,SAAS,CACZ+K,cAAeA,MAElB,+BAID,WAAoB,IAAD,OACjBjK,MAAMjE,EAAAA,EAAAA,yBACLkE,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAE,GACJ,EAAKjB,SAAS,CACZ8C,OAAS7B,EAAK6B,OACdtC,UAAU,OAIdM,MAAMjE,EAAAA,EAAAA,wBAAA,WAAgDwC,EAAAA,EAAAA,SACrD0B,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAE,GACJ,EAAKjB,SAAS,CACZgL,cAAgB/J,EAAK+J,cACrBxK,UAAU,OAIdM,MAAMjE,EAAAA,EAAAA,0BACLkE,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAE,GACJ,EAAKjB,SAAS,CACZiL,YAAchK,EAAKgK,YACnBzK,UAAU,OAIdM,MAAMjE,EAAAA,EAAAA,uBAA0C,CAC9C6I,OAAQ,OACRC,QAAQ,CACN,OAAU,mBACV,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CAAC,UAAY,GAAZ,OAAgBzG,EAAAA,EAAAA,YAEvC0B,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAE,GACF,EAAKjB,SAAS,CACVG,MAAQc,EAAKd,MACbK,UAAU,OAIlBM,MAAMjE,EAAAA,EAAAA,yBAAA,WAAiDwC,EAAAA,EAAAA,WACtD0B,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAE,GACJ,EAAKjB,SAAS,CACZuF,YAActE,EAAKsE,YACnB/E,UAAU,SAGf,oBAED,WAAU,IAAD,OAEI,IAAIoH,KAIIjH,KAAKP,MAAlB8K,SAEN,GAAwB,eAArB7L,EAAAA,EAAAA,SAAmC,CACpC,IACM8L,EADgBxK,KAAKP,MAAM0C,OACAsI,OAG3BC,EADsB1K,KAAKP,MAAM6K,YACMG,OAE7C,OACE,uBAAK7J,UAAU,mBACb,gBAAC+J,EAAA,EAAD,KACE,gBAAChF,EAAA,EAAD,CAAKC,GAAG,IAAIgF,GAAG,IAAIC,GAAG,KACpB,gBAACC,EAAA,EAAD,CAAMlK,UAAU,yBACd,gBAACmK,EAAA,EAAD,CAAUnK,UAAU,QAClB,gBAACoK,EAAA,EAAD,CAAapK,UAAU,eACrB,gBAACqK,EAAA,EAAD,CAAgB9M,GAAG,QAAQ+M,OAAQlL,KAAKP,MAAM0L,MAAOlB,OAAQ,WAAQ,EAAK5K,SAAS,CAAE8L,OAAQ,EAAK1L,MAAM0L,UACtG,gBAACC,EAAA,EAAD,CAAgBC,OAAK,EAACzK,UAAU,MAAMwF,MAAM,eAC1C,qBAAGxF,UAAU,oBAInB,uBAAKA,UAAU,cAAc4J,GAC7B,oDAKN,gBAAC7E,EAAA,EAAD,CAAKC,GAAG,IAAIgF,GAAG,IAAIC,GAAG,KACpB,gBAACC,EAAA,EAAD,CAAMlK,UAAU,wBACd,gBAACmK,EAAA,EAAD,CAAUnK,UAAU,QAClB,gBAACoK,EAAA,EAAD,CAAapK,UAAU,eACrB,gBAACqK,EAAA,EAAD,CAAgB9M,GAAG,QAAQ+M,OAAQlL,KAAKP,MAAM0L,MAAOlB,OAAQ,WAAQ,EAAK5K,SAAS,CAAE8L,OAAQ,EAAK1L,MAAM0L,UACtG,gBAACC,EAAA,EAAD,CAAgBC,OAAK,EAACzK,UAAU,MAAMwF,MAAM,eAC1C,qBAAGxF,UAAU,mBAInB,uBAAKA,UAAU,cAAc8J,GAC7B,qDAKR,gBAACC,EAAA,EAAD,KACE,gBAAChF,EAAA,EAAD,KACE,gBAACmF,EAAA,EAAD,KACE,gBAACC,EAAA,EAAD,KACE,gBAAC,EAAD,WAQT,GAAwB,eAArBrM,EAAAA,EAAAA,SAAmC,CACzC,IACM4M,EADkBtL,KAAKP,MAAMD,MACEiL,OAG/Bc,EADsBvL,KAAKP,MAAMmF,YACM6F,OAEvCJ,EAAkBrK,KAAKP,MAAvB4K,cAEN,OACE,uBAAKzJ,UAAU,mBACb,gBAAC+J,EAAA,EAAD,KACE,gBAAChF,EAAA,EAAD,CAAKC,GAAG,IAAIgF,GAAG,IAAIC,GAAG,KACpB,gBAACC,EAAA,EAAD,CAAMlK,UAAU,yBACd,gBAACmK,EAAA,EAAD,CAAUnK,UAAU,QAClB,gBAACoK,EAAA,EAAD,CAAapK,UAAU,eACrB,gBAACqK,EAAA,EAAD,CAAgB9M,GAAG,QAAQ+M,OAAQlL,KAAKP,MAAM0L,MAAOlB,OAAQ,WAAQ,EAAK5K,SAAS,CAAE8L,OAAQ,EAAK1L,MAAM0L,UACtG,gBAACC,EAAA,EAAD,CAAgBC,OAAK,EAACzK,UAAU,MAAMwF,MAAM,eAC1C,qBAAGxF,UAAU,oBAInB,uBAAKA,UAAU,cAAc0K,GAC7B,yCAKN,gBAAC3F,EAAA,EAAD,CAAKC,GAAG,IAAIgF,GAAG,IAAIC,GAAG,KACpB,gBAACC,EAAA,EAAD,CAAMlK,UAAU,wBACd,gBAACmK,EAAA,EAAD,CAAUnK,UAAU,QAClB,gBAACoK,EAAA,EAAD,CAAapK,UAAU,eACrB,gBAACqK,EAAA,EAAD,CAAgB9M,GAAG,QAAQ+M,OAAQlL,KAAKP,MAAM0L,MAAOlB,OAAQ,WAAQ,EAAK5K,SAAS,CAAE8L,OAAQ,EAAK1L,MAAM0L,UACtG,gBAACC,EAAA,EAAD,CAAgBC,OAAK,EAACzK,UAAU,MAAMwF,MAAM,eAC1C,qBAAGxF,UAAU,mBAInB,uBAAKA,UAAU,cAAc2K,EAA7B,MAAkDlB,GAClD,wCAKR,gBAACM,EAAA,EAAD,KACE,gBAAChF,EAAA,EAAD,KACE,gBAACmF,EAAA,EAAD,KACE,gBAACC,EAAA,EAAD,KACE,gBAAC,EAAD,WAQT,GAAwB,cAArBrM,EAAAA,EAAAA,SACN,OACE,uBAAKkC,UAAU,mBACb,gBAAC+J,EAAA,EAAD,KACE,gBAAChF,EAAA,EAAD,KACE,gBAACmF,EAAA,EAAD,KACE,gBAACC,EAAA,EAAD,KACE,gBAAC,EAAD,eAQf,EA3NGhB,CAAkB9H,EAAAA,Y,0FCvcT,SAASsC,EAAT,GAA+C,IAA5B6B,EAA2B,EAA3BA,MAAOxF,EAAoB,EAApBA,UAAW4K,EAAS,EAATA,MAC1CC,GAAU,OAAIC,MAAM,KAAK7H,KAAI,SAAC8H,EAAG7H,GACnC,OACI,uBAAKC,IAAKD,GACN,uBAAKlD,UAAU,YAAY4K,MAAO,CAAEI,WAAYxF,SAK5D,OACI,uBAAKxF,UAAS,sBAAiBA,GAAa4K,OAAK,UAAOA,IACnDC,GAcblH,EAAQsH,aAAe,CACnBzF,MAAO,UACPxF,UAAW,GACX4K,MAAO,K","sources":["constants/constants.js","constants/credentials.js","views/Configurations/ViewReportsModel.js","views/Configurations/DisplayClients.js","views/Configurations/AssignReportModel.js","views/Configurations/DisplayClientReports.js","views/Configurations/UserReports.js","views/Dashboard/Dashboard.js","views/Loaders/Spinner.js"],"sourcesContent":["\nclass Url {\n    //static BASE_URL = \"http://localhost:1110/api/\";\n\n    static BASE_URL = \"https://insightbackendservice.azurewebsites.net/api/\"\n\n    //static BASE_URL = \"https://services.data-intell.co.uk/api/\";\n}\n\nclass Server_connection {\n\n    static ADMIN_SIGN_UP_URL = Url.BASE_URL + \"users/create_account\";\n\n    static ADMIN_LOGIN_URL = Url.BASE_URL + \"users/login\";\n\n    static ADD_NEW_CLIENT_URL = Url.BASE_URL + \"users/client/register\";\n\n    static CLIENT_ADMIN_SIGN_UP_URL = Url.BASE_URL + \"users/client/create_account\";\n\n    static CLIENT_ADMIN_LOGIN_URL = Url.BASE_URL + \"users/clientAdmin/login\";\n\n    static GET_ALL_CLIENTS_URL = Url.BASE_URL + \"users/clients\";\n\n    static GET_ALL_APP_CLIENTS_URL = Url.BASE_URL + \"users/clients_only\";\n\n    static DELETE_CLIENT_INFO_URL = Url.BASE_URL + \"users/delete/clientInfo\";\n\n    static GET_CLIENT_REPORTS_URL = Url.BASE_URL + \"users/client/reports\";\n\n    static ADD_CLIENT_USER_URL = Url.BASE_URL + \"users/clientUser/register\";\n\n    static UPDATE_CLIENT_INFO_URL = Url.BASE_URL + \"users/update/clientInfo\";\n\n    static UPDATE_CLIENT_USER_INFO_URL = Url.BASE_URL + \"users/update/clientUsersInfo\";\n\n    static DELETE_CLIENT_USER_INFO_URL = Url.BASE_URL + \"users/clientUser/deleteInfo\";\n\n    static GET_ALL_CLIENT_USERS_URL = Url.BASE_URL + \"users/clientUsers\";\n\n    static ASSIGN_REPORTS_TO_USERS_URL = Url.BASE_URL + \"users/client_reports/assignReports\";\n\n    static GET_ALL_ASIGNED_REPORTS_URL = Url.BASE_URL + \"users/client_reports/assignments\";\n\n    static DELETE_ASSIGNMENT_INFO_URL = Url.BASE_URL + \"users/client_reports/assignments/deleteInfo\"\n\n    static ACCESS_TOKEN_URL = Url.BASE_URL + \"users/accessToken\";\n\n    static GET_ALL_INTEL_ADMINS_URL = Url.BASE_URL + \"users/intelAdmins\";\n\n    static CHANGE_PASSWORD = Url.BASE_URL + \"users/intelAdmin/change_password/\";\n\n    static FORGOT_PASSWORD_URL = Url.BASE_URL + \"users/intelAdmin/forgot_password\";\n\n    static RESET_PASSWORD_URL = Url.BASE_URL + \"users/intelAdmin/reset_password\";\n}\n\nexport default Server_connection;","import jwt_decode from 'jwt-decode';\n\nconst token = localStorage.IntellUserToken;\nconst decoded = jwt_decode(token);\n\nlet Client_id = decoded.client_id;\nlet Email = decoded.email;\nlet Id = decoded.id;\nlet Name = decoded.username;\nlet Status = decoded.user_status;\nlet Type = decoded.user_type\n\nclass UserInfo {\n\n    static UserEmail = Email;\n\n    static UserId = Id;\n\n    static UserName = Name;\n\n    static UserType = Type;\n\n    static UserStatus = Status;\n\n    static ClientId = Client_id;\n\n}\n\nexport default UserInfo;","import React, { Component } from 'react';\nimport {Modal, Button,} from 'react-bootstrap'\nimport {Col,FormGroup,Input,Select,Label,Row, Table} from 'reactstrap';\nimport './ModalStylee.css';\nimport { PowerBIEmbed } from 'powerbi-client-react';\nimport { models } from 'powerbi-client';\nimport qs from 'querystring';\nimport Server_connection from '../../constants/constants';\n\nclass ViewReportsModel extends Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        id:'',\n        embedUrl: '',\n        access_token: '',\n        value: [],\n        message: '',\n        searchItem: '',\n        isLoaded: false,\n      }\n      //this.handleUpdateItem = this.handleUpdateItem.bind(this);\n      this.onChange = this.onChange.bind(this);\n    }\n\n    onChange(e){\n      this.setState({[e.target.name]: e.target.value});\n      //console.log({[e.target.name]: e.target.value});\n    }\n\n    componentWillReceiveProps(nextProps){\n        this.setState({\n            id: nextProps.id,\n            embedUrl: nextProps.embedUrl\n        })\n    }\n\n    handleSearchInput = (e) => {\n        this.setState({ searchItem: e.target.value})\n    }\n\n    componentDidMount(){\n        fetch(Server_connection.ACCESS_TOKEN_URL)\n        .then(res => res.json())\n        .then(json => {\n          this.setState({\n            access_token:  json.access_token,\n            isLoaded: true\n          })\n        })\n    }\n\n    render() {\n        console.log(this.state.access_token)\n        return (\n            <Modal {...this.props} size=\"xl\"  centered id=\"exampleModal\">\n              <Modal.Header closeButton>\n                <Modal.Title id=\"contained-modal-title-vcenter\">\n                  <div className=\"modal-title\">Report {this.state.accessToken}</div>\n                </Modal.Title>\n              </Modal.Header>\n              <Modal.Body>\n                <PowerBIEmbed\n\t                embedConfig = {{\n\t\t                type: 'report',   // Supported types: report, dashboard, tile, visual and qna\n\t\t                id: `${this.state.id}`,\n\t\t                embedUrl: `${this.state.embedUrl}`,\n\t\t                accessToken: `${this.state.access_token}`,\n\t\t                tokenType: models.TokenType.Aad,\n\t\t                settings: {\n\t\t\t                panes: {\n\t\t\t\t                filters: {\n\t\t\t\t\t                expanded: false,\n\t\t\t\t\t                visible: false\n\t\t\t\t                }\n\t\t\t                },\n\t\t\t                // background: models.BackgroundType.Transparent,\n\t\t                }\n\t                }}\n\n\t                eventHandlers = { \n\t\t                new Map([\n\t\t\t                ['loaded', function () {console.log('Report loaded');}],\n\t\t\t                ['rendered', function () {console.log('Report rendered');}],\n\t\t\t                ['error', function (event) {console.log(event.detail);}]\n\t\t                ])\n\t                }\n\t\t\n\t                cssClassName = { \"Embed-container\" }\n\n\t                getEmbeddedComponent = { (embeddedReport) => {\n\t\t                window.report = embeddedReport;\n\t                }}\n                />\n              </Modal.Body>\n              {/* <Modal.Footer>\n                <div className=\"d-inline\">\n                  <Button block color=\"danger\" size=\"sm\" className=\"btn-pill bg-danger\" onClick={this.props.onHide}>Close</Button>\n                </div>\n                <div className=\"d-inline\">\n                  <Button block color=\"success\" size=\"sm\" className=\"btn-pill bg-success\" onClick={this.handleUpdateItem}>Display Reports</Button>\n                </div>\n              </Modal.Footer> */}\n            </Modal>\n          );\n    }\n}\n\nexport default ViewReportsModel;","import React, {Component} from 'react';\nimport {Button, Badge, Table, Col, Row, Label } from 'reactstrap';\nimport Server_connection from '../../constants/constants'  \nimport Spinner from '../Loaders/Spinner'\nimport './config.scss'\n\nclass DisplayClients extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n          groups: [],\n          isLoaded: false,\n          searchItem: '',\n          addModalShow: false,\n          editModalShow: false\n        }\n        this.handleRefreshButton = this.handleRefreshButton.bind(this);\n    }\n\n    handleSearchInput = (e) => {\n      this.setState({ searchItem: e.target.value})\n    }\n\n    handleRefreshButton(e){\n        e.preventDefault();\n        //this.props.history.push('/geographics')\n        window.location.reload(false);\n      }\n\n    componentDidMount(){\n        fetch(Server_connection.GET_ALL_APP_CLIENTS_URL)\n        .then(res => res.json())\n        .then(json => {\n          this.setState({\n            groups:  json.groups,\n            isLoaded: true\n          })\n        })\n    }\n\n    render(){\n      console.log(this.state.items);\n      var { isLoaded, groups } = this.state;\n\n      let addModalClose = () => this.setState({addModalShow : false});\n      let editModalClose = () => this.setState({editModalShow : false});\n\n      const {Id, ActivityName, ActivityStartDate, ActivityEndDate, ActivityVenue, ActivityDescription, Status, Leader, \n        LeaderContact} = this.state;\n\n      let filteredItem = groups.filter((item) => {\n        return item.client_name.toLowerCase().includes(this.state.searchItem.toLowerCase());\n      });\n\n      if(!isLoaded){\n        return <div className='spinner'><Spinner/></div>\n      }\n      else{\n        return(\n          <div>\n              <div className=\"\">\n                  <strong> These are live Activity logs</strong>\n                  <form className=\"form-inline mr-auto formRight active-pink-3 active-pink-4\">\n                      <input className=\"form-control mr-sm-2\" type=\"text\" placeholder=\"Search by Client Name\" aria-label=\"Search\" \n                      onChange={this.handleSearchInput}/>\n                      {/* <button className=\"btn-pill btn-success\" type=\"submit\">Search</button> */}\n                      <i class=\"icon-search\" aria-hidden=\"true\"></i>\n                  </form>\n              </div><hr/>\n              <div className=\"parentDiv\">\n              <Table hover responsive className=\"table-outline mb-0 d-none d-sm-table\">\n                <thead className=\"thead-light\">\n                <tr>\n                  <th>Client Name</th>\n                  {/* <th>Address</th> */}\n                  <th>Country</th>\n                  <th>License No</th>\n                  <th>License Expiry</th>\n                  <th>Contract No</th>\n                  <th>Contract Start</th>\n                  <th>Contract End</th>\n                  <th>Contract Status</th>\n                </tr>\n                </thead>\n                <tbody>\n                {filteredItem.map((item, index) => (\n                <tr key={ index }>\n                  <td>\n                    <div>{item.client_name}</div>\n                  </td>\n                  {/* <td>\n                    <div>{item.address}</div>\n                  </td> */}\n                  <td>\n                    <div>{item.country}</div>\n                  </td>\n                  <td>\n                    <div>{item.license_number}</div>\n                  </td>\n                  <td>\n                    <div>{item.license_expiryDate}</div>\n                  </td>\n                  <td>\n                    <div>{item.contract_number}</div>\n                  </td>\n                  <td>\n                  <div>{item.contract_startDate}</div>\n                  </td>\n                  <td>\n                    <div>{item.contract_endDate}</div>\n                  </td>\n                  <td>\n                    <div>{item.client_status}</div>\n                  </td>\n                </tr>\n                ))}\n                </tbody>\n              </Table>\n          </div>\n          </div>\n      );\n      }\n    }\n}\n\nexport default DisplayClients;","import React, { Component } from 'react';\nimport {Modal, Button,} from 'react-bootstrap'\nimport {Col,FormGroup,Input,Select,Label,Row,} from 'reactstrap';\n//import Spinner from '../../Loaders/Spinner'\nimport './ModalStylee.css'\nimport Feedback from 'react-bootstrap/Feedback';\nimport Server_connection from '../../constants/constants';\nimport UserInfo from '../../constants/credentials'\n\nclass AssignReportModal extends Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        report_id: '',\n        report_name: '',\n        user_email: '',\n        client_id: '',\n        embedUrl: '',\n        clientUsers: [],\n        message: '',\n        isLoaded: false,\n      }\n      this.handleUpdateItem = this.handleUpdateItem.bind(this);\n      this.onChange = this.onChange.bind(this);\n    }\n\n    onChange(e){\n      this.setState({[e.target.name]: e.target.value});\n      //console.log({[e.target.name]: e.target.value});\n    }\n\n    componentDidMount(){\n        fetch(Server_connection.GET_ALL_CLIENT_USERS_URL + `/${UserInfo.ClientId}`)\n        .then(res => res.json())\n        .then(json => {\n          this.setState({\n            clientUsers:  json.clientUsers,\n            isLoaded: true\n          })\n        })\n    }\n\n    componentWillReceiveProps(nextProps){\n        this.setState({\n            report_id: nextProps.report_id,\n            report_name: nextProps.report_name,\n            embedUrl: nextProps.embedUrl\n        })\n    }\n\n    handleUpdateItem(e){\n      e.preventDefault();\n\n      const assignReportToUser = {\n        report_id: this.state.report_id,\n        report_name: this.state.report_name,\n        embedUrl: this.state.embedUrl,\n        user_email: this.state.user_email,\n        client_id: `${UserInfo.ClientId}`,\n      };\n\n      console.log(assignReportToUser);\n\n      fetch(Server_connection.ASSIGN_REPORTS_TO_USERS_URL,{\n        method: 'POST',\n        headers:{\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body:JSON.stringify(assignReportToUser)\n      })\n      .then(res => res.json())\n      .then((result) =>{\n        this.setState({message : result.message, isLoaded : true})\n        console.log([this.state.message])\n      },\n      (error) => {\n        this.setState({message : 'Failed.. Try again!!'})\n      });\n    }\n\n    render() {\n        var { counties, districts, clientUsers} = this.state;\n        return (\n            <Modal {...this.props} size=\"md\" aria-labelledby=\"contained-modal-title-vcenter\" centered id=\"exampleModal\">\n              <Modal.Header closeButton>\n                <Modal.Title id=\"contained-modal-title-vcenter\">\n                  <div className=\"modal-title\">Assign Report To User </div>\n                </Modal.Title>\n              </Modal.Header>\n              <Modal.Body>\n                <FormGroup row className=\"my-0\">\n                  <Col xs=\"12\">\n                    <FormGroup>\n                      <Label htmlFor=\"report_id\" className=\"lable\">Report Name</Label>\n                      <Input type=\"text\" name=\"report_id\" value ={this.state.report_name} onChange={this.onChange} readOnly/>\n                    </FormGroup>\n                  </Col>\n                </FormGroup>\n                {/* <FormGroup row className=\"my-0\">\n                  <Col xs=\"12\">\n                    <FormGroup>\n                      <Label htmlFor=\"last_name\" className=\"lable\">Last Name</Label>\n                        <Input type=\"text\" name=\"last_name\" value ={this.state.last_name} onChange={this.onChange}/>\n                    </FormGroup>\n                  </Col>\n                </FormGroup> */}\n                <FormGroup row className=\"my-0\">\n                  <Col xs=\"12\">\n                    <FormGroup>\n                      <Label htmlFor=\"user_email\" className=\"lable\">User Email Address</Label>\n                      <Input type=\"select\" name=\"user_email\" value={this.state.user_email} onChange={this.onChange}>\n                        <option></option>\n                            {clientUsers.map((y, index) => (\n                            <option key = {index}>{y.email}</option>\n                            ))}\n                      </Input>\n                    </FormGroup>\n                  </Col>\n                </FormGroup>\n                <hr/>\n                <span className='modal-alert'>{this.state.message }</span>\n              </Modal.Body>\n              <Modal.Footer>\n                <div className=\"d-inline\">\n                  <Button block color=\"danger\" size=\"sm\" className=\"btn-pill bg-danger\" onClick={this.props.onHide}>Close</Button>\n                </div>\n                <div className=\"d-inline\">\n                  <Button block color=\"success\" size=\"sm\" className=\"btn-pill bg-success\" onClick={this.handleUpdateItem}>Save</Button>\n                </div>\n              </Modal.Footer>\n            </Modal>\n          );\n    }\n}\n\nexport default AssignReportModal;","import React, {Component} from 'react';\nimport {Button, Badge, Table, Col, Row, Label } from 'reactstrap';\nimport { Link, NavLink, withRouter } from 'react-router-dom';\nimport Server_connection from '../../constants/constants'  \nimport Spinner from '../Loaders/Spinner'\nimport './config.scss'\nimport UserInfo from '../../constants/credentials'\nimport ViewReportsModel from './ViewReportsModel'\nimport AssignReportModal from './AssignReportModel'\n\nclass DisplayClientReports extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n          value: [],\n          isLoaded: false,\n          searchItem: '',\n          addModalShow: false,\n          assignModalShow: false,\n          viewReportsModalShow: false\n        }\n        this.handleRefreshButton = this.handleRefreshButton.bind(this);\n    }\n\n    handleSearchInput = (e) => {\n      this.setState({ searchItem: e.target.value})\n    }\n\n    handleRefreshButton(e){\n        e.preventDefault();\n        //this.props.history.push('/geographics')\n        window.location.reload(false);\n      }\n\n    componentDidMount(){\n      fetch(Server_connection.GET_CLIENT_REPORTS_URL, {\n        method: \"POST\", \n        headers:{\n          'Accept': 'application/json',\n          'Content-Type': 'application/json' \n        },\n        body: JSON.stringify({\"client_id\": `${UserInfo.UserId}`})\n      })\n      .then(res => res.json()) \n      .then(json => {\n          this.setState({\n              value:  json.value,\n              isLoaded: true\n          })\n      });\n    }\n\n    render(){\n      console.log(this.state.items);\n      var { isLoaded, value } = this.state;\n      const {Id, EmbedUrl, ReportName} = this.state\n      let viewReportsModalClose = () => this.setState({viewReportsModalShow : false});\n\n      let addModalClose = () => this.setState({addModalShow : false});\n      let assignModalClose = () => this.setState({assignModalShow : false});\n\n      // const {Id, ActivityName, ActivityStartDate, ActivityEndDate, ActivityVenue, ActivityDescription, Status, Leader, \n      //   LeaderContact} = this.state;\n\n        let filteredItem = value.filter((item) => {\n          return item.name.toLowerCase().includes(this.state.searchItem.toLowerCase());\n      });\n\n      if(!isLoaded){\n        return <div className='spinner'><Spinner/></div>\n      }\n      else{\n        return(\n          <div>\n              <div className=\"\">\n                  <strong> These are live Report logs</strong>\n                  <form className=\"form-inline mr-auto formRight active-pink-3 active-pink-4\">\n                      <input className=\"form-control mr-sm-2\" type=\"text\" placeholder=\"Search by Report Name\" aria-label=\"Search\" \n                      onChange={this.handleSearchInput}/>\n                      {/* <button className=\"btn-pill btn-success\" type=\"submit\">Search</button> */}\n                      <i class=\"icon-search\" aria-hidden=\"true\"></i>\n                  </form>\n              </div><hr/>\n              <div className=\"parentDiv\">\n              <Table hover responsive className=\"table-outline mb-0 d-none d-sm-table\">\n                <thead className=\"thead-light\">\n                <tr>\n                  <th>Report Name</th>\n                  <th></th>\n                  <th></th>\n                  <th></th>\n                  <th></th>\n                  <th></th>\n                  <th></th>\n                  <th></th>\n                  <th></th>\n                  <th>View Report</th>\n                  <th>Assign To User</th>\n                </tr>\n                </thead>\n                <tbody>\n                {filteredItem.map((item, index) => (\n                <tr key={ index }>\n                  <td>\n                    <div>{item.name}</div>\n                  </td>\n                  <td>\n                    <div></div>\n                  </td>\n                  <td>\n                    <div></div>\n                  </td>\n                  <td>\n                    <div></div>\n                  </td>\n                  <td>\n                    <div></div>\n                  </td>\n                  <td>\n                    <div></div>\n                  </td>\n                  <td>\n                    <div></div>\n                  </td>\n                  <td>\n                    <div></div>\n                  </td>\n                  <td>\n                    <div></div>\n                  </td>\n                  <td>\n                    <div>\n                    <Label block color=\"info\" size=\"sm\" className=\"btn-pill bg-success btn-space\">\n                    <Link to={{pathname:\"/view_report\", embedUrl: item.embedUrl, id: item.id}}>\n                      <strong className=\"actionLink\">View Report</strong></Link></Label>\n                    </div>\n                  </td>\n                  <td>\n                    <div>\n                    <Label block color=\"info\" size=\"sm\" className=\"btn-pill bg-primary btn-space\" \n                      onClick={() => {\n                        this.setState({assignModalShow: true,\n                          EmbedUrl: item.embedUrl, Id: item.id, ReportName: item.name});\n                        }\n                        }><strong className=\"action\">Assign to user</strong></Label>\n                    </div>\n                  </td>\n                </tr>\n                ))}\n                </tbody>\n              </Table>\n          </div>\n              <ViewReportsModel\n                id = {Id}\n                embedUrl = {EmbedUrl}\n                show = {this.state.viewReportsModalShow}\n                onHide = {viewReportsModalClose}/>\n\n              <AssignReportModal\n                report_id = {Id}\n                report_name = {ReportName}\n                embedUrl = {EmbedUrl}\n                show = {this.state.assignModalShow}\n                onHide = {assignModalClose}/>\n          </div>\n      );\n      }\n    }\n}\n\nexport default DisplayClientReports;","import React, { Component } from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport { AppAsideToggler, AppNavbarBrand, AppSidebarToggler } from '@coreui/react';\nimport {Button, Label, Card, CardBody, CardGroup, Col, Container, Form, Input, InputGroup, InputGroupAddon, InputGroupText, Row, Table } from 'reactstrap';\nimport jwt_decode from 'jwt-decode';\nimport '../Pages/Login/Login.scss';\n//import logo from '../../../assets/img/brand/mispace4.jpg'\nimport UserInfo from '../../constants/credentials'\nimport Spinner from '../Loaders/Spinner'\nimport Server_connection from '../../constants/constants';\n//import '../../Geographics/LocationStylee.css'\nimport ViewReportsModel from '../Configurations/ViewReportsModel'\n\nvar date = new Date();\nlet today = date.getFullYear() + \"-\" + (\"0\" + (date.getMonth() + 1)).slice(-2) + \"-\" + (\"0\" + date.getDate()).slice(-2);\n\nclass UserReports extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n        reports: [],\n        searchItem: '',\n        isLoaded: false,\n        viewReportModalShow: false,\n        supportModalShow: false,\n        downloadModalShow: false\n    };\n\n    this.onSubmit = this.onSubmit.bind(this);\n    this.logOut = this.logOut.bind(this);\n    this.onChange = this.onChange.bind(this);\n  }\n\n  onChange(e){\n    this.setState({[e.target.name]: e.target.value});\n  }\n\n  handleSearchInput = (e) => {\n    this.setState({ searchItem: e.target.value})\n  }\n\n  onSubmit(e){\n    e.preventDefault();\n  }\n\n  logOut(e){\n    e.preventDefault()\n    localStorage.removeItem('IntellUserToken');\n    localStorage.clear()\n    this.props.history.push('/login')\n  }\n\n  componentDidMount(){\n    fetch(Server_connection.ASSIGN_REPORTS_TO_USERS_URL + `/${UserInfo.ClientId}/${UserInfo.UserEmail}`)\n    .then(res => res.json())\n    .then(json => {\n      this.setState({\n        reports:  json.reports,\n        isLoaded: true\n      })\n    })\n}\n\n  render() {\n    var { isLoaded, reports } = this.state;\n    const {Id, EmbedUrl, ReportName} = this.state\n\n    let viewReportClose = () => this.setState({viewReportModalShow : false});\n    let supportModalClose = () => this.setState({supportModalShow : false});\n    let downloadModalClose = () => this.setState({downloadModalShow : false});\n\n    let filteredItem = reports.filter((item) => {\n      return item.report_name.toLowerCase().includes(this.state.searchItem.toLowerCase());\n    });\n\n    const {Code, Name} = this.state\n\n    if(!isLoaded){\n        return <div className='spinner'><Spinner/></div>\n    }\n    else{\n    return (\n      <div className=\"align-items-center propertyDiv\">\n        <Container>\n        <Form>\n                      <AppNavbarBrand>\n                        <div><h4 className=\"justify-content-center\">Welcome {UserInfo.UserName}</h4></div>\n                        <div><h6>These are the reports assigned to you.</h6></div>\n                      </AppNavbarBrand>\n                      <hr/>\n                      <div>\n                        <strong className=\"text-muted\">Select a report to view </strong>\n                        <form className=\"form-inline mr-auto formRight\">\n                          <input className=\"form-control mr-sm-2\" type=\"text\" placeholder=\"Search by Report Name\" aria-label=\"Search\" \n                            onChange={this.handleSearchInput}/>\n                        </form>\n                      </div><br/>\n                      <div className=\"reportDiv\">\n                      <Table hover responsive className=\"table-outline mb-0 d-none d-sm-table\">\n                        <thead className=\"thead-light\">\n                            <tr>\n                            {/* <th className=\"text-center\"><i className=\"icon-picture\"></i></th> */}\n                            <th>Client ID</th>\n                            <th>Report Name</th>\n                            <th></th>\n                            <th>Date and Time</th>\n                            <th>View Report</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                        {filteredItem.map((property, index) => (\n                            <tr key={ index }>\n                                <td>\n                                    <div>{property.client_id}</div>\n                                </td>\n                                <td>\n                                    <div>{property.report_name}</div>\n                                </td>\n                                <td>\n                                    <div></div>\n                                </td>\n                                <td>\n                                    <div>{property.updated_at}</div>\n                                </td>\n                                <td>\n                                <Label block color=\"info\" size=\"sm\" className=\"btn-pill bg-success btn-space\">\n                                  <Link to={{pathname:\"/report\", embedUrl: property.embedUrl, id: property.report_id}}\n                                  ><strong className=\"actionLink\">View Report</strong></Link></Label>\n                                </td>\n                            </tr>\n                        ))}\n                        </tbody>\n                      </Table>\n                      </div>\n                    </Form>\n        </Container>\n        <ViewReportsModel\n          id = {Id}\n          embedUrl = {EmbedUrl}\n\n          show = {this.state.viewReportModalShow}\n          onHide = {viewReportClose}/>\n      </div>\n    );}\n  }\n}\n\nexport default withRouter(UserReports);\n","import React, { Component, lazy, Suspense } from 'react';\nimport { Bar, Line } from 'react-chartjs-2';\nimport {\n  Badge,\n  Button,\n  ButtonDropdown,\n  ButtonGroup,\n  ButtonToolbar,\n  Card,\n  CardBody,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n  Col,\n  Dropdown,\n  DropdownItem,\n  DropdownMenu,\n  DropdownToggle,\n  Progress,\n  Row,\n  Table,\n} from 'reactstrap';\nimport { CustomTooltips } from '@coreui/coreui-plugin-chartjs-custom-tooltips';\nimport { getStyle, hexToRgba } from '@coreui/coreui/dist/js/coreui-utilities'\nimport Server_connection from '../../constants/constants';\nimport DisplayClients from '../Configurations/DisplayClients';\nimport DisplayClientReports from '../Configurations/DisplayClientReports';\nimport UserReports from '../Configurations/UserReports';\nimport UserInfo from '../../constants/credentials'\n\nconst Widget03 = lazy(() => import('../../views/Widgets/Widget03'));\n\nconst brandPrimary = getStyle('--primary')\nconst brandSuccess = getStyle('--success')\nconst brandInfo = getStyle('--info')\nconst brandWarning = getStyle('--warning')\nconst brandDanger = getStyle('--danger')\n\n// Card Chart 1\nconst cardChartData1 = {\n  labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n  datasets: [\n    {\n      label: 'My First dataset',\n      backgroundColor: brandPrimary,\n      borderColor: 'rgba(255,255,255,.55)',\n      data: [65, 59, 84, 84, 51, 55, 40],\n    },\n  ],\n};\n\nconst cardChartOpts1 = {\n  tooltips: {\n    enabled: false,\n    custom: CustomTooltips\n  },\n  maintainAspectRatio: false,\n  legend: {\n    display: false,\n  },\n  scales: {\n    xAxes: [\n      {\n        gridLines: {\n          color: 'transparent',\n          zeroLineColor: 'transparent',\n        },\n        ticks: {\n          fontSize: 2,\n          fontColor: 'transparent',\n        },\n\n      }],\n    yAxes: [\n      {\n        display: false,\n        ticks: {\n          display: false,\n          min: Math.min.apply(Math, cardChartData1.datasets[0].data) - 5,\n          max: Math.max.apply(Math, cardChartData1.datasets[0].data) + 5,\n        },\n      }],\n  },\n  elements: {\n    line: {\n      borderWidth: 1,\n    },\n    point: {\n      radius: 4,\n      hitRadius: 10,\n      hoverRadius: 4,\n    },\n  }\n}\n\n\n// Card Chart 2\nconst cardChartData2 = {\n  labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n  datasets: [\n    {\n      label: 'My First dataset',\n      backgroundColor: brandInfo,\n      borderColor: 'rgba(255,255,255,.55)',\n      data: [1, 18, 9, 17, 34, 22, 11],\n    },\n  ],\n};\n\nconst cardChartOpts2 = {\n  tooltips: {\n    enabled: false,\n    custom: CustomTooltips\n  },\n  maintainAspectRatio: false,\n  legend: {\n    display: false,\n  },\n  scales: {\n    xAxes: [\n      {\n        gridLines: {\n          color: 'transparent',\n          zeroLineColor: 'transparent',\n        },\n        ticks: {\n          fontSize: 2,\n          fontColor: 'transparent',\n        },\n\n      }],\n    yAxes: [\n      {\n        display: false,\n        ticks: {\n          display: false,\n          min: Math.min.apply(Math, cardChartData2.datasets[0].data) - 5,\n          max: Math.max.apply(Math, cardChartData2.datasets[0].data) + 5,\n        },\n      }],\n  },\n  elements: {\n    line: {\n      tension: 0.00001,\n      borderWidth: 1,\n    },\n    point: {\n      radius: 4,\n      hitRadius: 10,\n      hoverRadius: 4,\n    },\n  },\n};\n\n// Card Chart 3\nconst cardChartData3 = {\n  labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n  datasets: [\n    {\n      label: 'My First dataset',\n      backgroundColor: 'rgba(255,255,255,.2)',\n      borderColor: 'rgba(255,255,255,.55)',\n      data: [78, 81, 80, 45, 34, 12, 40],\n    },\n  ],\n};\n\nconst cardChartOpts3 = {\n  tooltips: {\n    enabled: false,\n    custom: CustomTooltips\n  },\n  maintainAspectRatio: false,\n  legend: {\n    display: false,\n  },\n  scales: {\n    xAxes: [\n      {\n        display: false,\n      }],\n    yAxes: [\n      {\n        display: false,\n      }],\n  },\n  elements: {\n    line: {\n      borderWidth: 2,\n    },\n    point: {\n      radius: 0,\n      hitRadius: 10,\n      hoverRadius: 4,\n    },\n  },\n};\n\n// Card Chart 4\nconst cardChartData4 = {\n  labels: ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', ''],\n  datasets: [\n    {\n      label: 'My First dataset',\n      backgroundColor: 'rgba(255,255,255,.3)',\n      borderColor: 'transparent',\n      data: [78, 81, 80, 45, 34, 12, 40, 75, 34, 89, 32, 68, 54, 72, 18, 98],\n      barPercentage: 0.6,\n    },\n  ],\n};\n\nconst cardChartOpts4 = {\n  tooltips: {\n    enabled: false,\n    custom: CustomTooltips\n  },\n  maintainAspectRatio: false,\n  legend: {\n    display: false,\n  },\n  scales: {\n    xAxes: [\n      {\n        display: false,\n      }],\n    yAxes: [\n      {\n        display: false,\n      }],\n  },\n};\n\n// Social Box Chart\nconst socialBoxData = [\n  { data: [65, 59, 84, 84, 51, 55, 40], label: 'facebook' },\n  { data: [1, 13, 9, 17, 34, 41, 38], label: 'twitter' },\n  { data: [78, 81, 80, 45, 34, 12, 40], label: 'linkedin' },\n  { data: [35, 23, 56, 22, 97, 23, 64], label: 'google' },\n];\n\nconst makeSocialBoxData = (dataSetNo) => {\n  const dataset = socialBoxData[dataSetNo];\n  const data = {\n    labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n    datasets: [\n      {\n        backgroundColor: 'rgba(255,255,255,.1)',\n        borderColor: 'rgba(255,255,255,.55)',\n        pointHoverBackgroundColor: '#fff',\n        borderWidth: 2,\n        data: dataset.data,\n        label: dataset.label,\n      },\n    ],\n  };\n  return () => data;\n};\n\nconst socialChartOpts = {\n  tooltips: {\n    enabled: false,\n    custom: CustomTooltips\n  },\n  responsive: true,\n  maintainAspectRatio: false,\n  legend: {\n    display: false,\n  },\n  scales: {\n    xAxes: [\n      {\n        display: false,\n      }],\n    yAxes: [\n      {\n        display: false,\n      }],\n  },\n  elements: {\n    point: {\n      radius: 0,\n      hitRadius: 10,\n      hoverRadius: 4,\n      hoverBorderWidth: 3,\n    },\n  },\n};\n\n// sparkline charts\nconst sparkLineChartData = [\n  {\n    data: [35, 23, 56, 22, 97, 23, 64],\n    label: 'New Clients',\n  },\n  {\n    data: [65, 59, 84, 84, 51, 55, 40],\n    label: 'Recurring Clients',\n  },\n  {\n    data: [35, 23, 56, 22, 97, 23, 64],\n    label: 'Pageviews',\n  },\n  {\n    data: [65, 59, 84, 84, 51, 55, 40],\n    label: 'Organic',\n  },\n  {\n    data: [78, 81, 80, 45, 34, 12, 40],\n    label: 'CTR',\n  },\n  {\n    data: [1, 13, 9, 17, 34, 41, 38],\n    label: 'Bounce Rate',\n  },\n];\n\nconst makeSparkLineData = (dataSetNo, variant) => {\n  const dataset = sparkLineChartData[dataSetNo];\n  const data = {\n    labels: ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'],\n    datasets: [\n      {\n        backgroundColor: 'transparent',\n        borderColor: variant ? variant : '#c2cfd6',\n        data: dataset.data,\n        label: dataset.label,\n      },\n    ],\n  };\n  return () => data;\n};\n\nconst sparklineChartOpts = {\n  tooltips: {\n    enabled: false,\n    custom: CustomTooltips\n  },\n  responsive: true,\n  maintainAspectRatio: true,\n  scales: {\n    xAxes: [\n      {\n        display: false,\n      }],\n    yAxes: [\n      {\n        display: false,\n      }],\n  },\n  elements: {\n    line: {\n      borderWidth: 2,\n    },\n    point: {\n      radius: 0,\n      hitRadius: 10,\n      hoverRadius: 4,\n      hoverBorderWidth: 3,\n    },\n  },\n  legend: {\n    display: false,\n  },\n};\n\n// Main Chart\n\n//Random Numbers\nfunction random(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nvar elements = 27;\nvar data1 = [];\nvar data2 = [];\nvar data3 = [];\n\nfor (var i = 0; i <= elements; i++) {\n  data1.push(random(50, 200));\n  data2.push(random(80, 100));\n  data3.push(65);\n}\n\nconst mainChart = {\n  labels: ['Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa', 'Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa', 'Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa', 'Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa', 'Su'],\n  datasets: [\n    {\n      label: 'My First dataset',\n      backgroundColor: hexToRgba(brandInfo, 10),\n      borderColor: brandInfo,\n      pointHoverBackgroundColor: '#fff',\n      borderWidth: 2,\n      data: data1,\n    },\n    {\n      label: 'My Second dataset',\n      backgroundColor: 'transparent',\n      borderColor: brandSuccess,\n      pointHoverBackgroundColor: '#fff',\n      borderWidth: 2,\n      data: data2,\n    },\n    {\n      label: 'My Third dataset',\n      backgroundColor: 'transparent',\n      borderColor: brandDanger,\n      pointHoverBackgroundColor: '#fff',\n      borderWidth: 1,\n      borderDash: [8, 5],\n      data: data3,\n    },\n  ],\n};\n\nconst mainChartOpts = {\n  tooltips: {\n    enabled: false,\n    custom: CustomTooltips,\n    intersect: true,\n    mode: 'index',\n    position: 'nearest',\n    callbacks: {\n      labelColor: function(tooltipItem, chart) {\n        return { backgroundColor: chart.data.datasets[tooltipItem.datasetIndex].borderColor }\n      }\n    }\n  },\n  maintainAspectRatio: false,\n  legend: {\n    display: false,\n  },\n  scales: {\n    xAxes: [\n      {\n        gridLines: {\n          drawOnChartArea: false,\n        },\n      }],\n    yAxes: [\n      {\n        ticks: {\n          beginAtZero: true,\n          maxTicksLimit: 5,\n          stepSize: Math.ceil(250 / 5),\n          max: 250,\n        },\n      }],\n  },\n  elements: {\n    point: {\n      radius: 0,\n      hitRadius: 10,\n      hoverRadius: 4,\n      hoverBorderWidth: 3,\n    },\n  },\n};\n\nclass Dashboard extends Component {\n  constructor(props) {\n    super(props);\n\n    this.toggle = this.toggle.bind(this);\n    this.onRadioBtnClick = this.onRadioBtnClick.bind(this);\n\n    this.state = {\n      dropdownOpen: false,\n      radioSelected: 2,\n      licenseNumber: '',\n      groups: [],\n      intelAdmins: [],\n      clientUsers: [],\n      value: []   \n    };\n  }\n\n  toggle() {\n    this.setState({\n      dropdownOpen: !this.state.dropdownOpen,\n    });\n  }\n\n  onRadioBtnClick(radioSelected) {\n    this.setState({\n      radioSelected: radioSelected,\n    });\n  }\n\n  loading = () => <div className=\"animated fadeIn pt-1 text-center\">Loading...</div>\n\n  componentDidMount(){\n    fetch(Server_connection.GET_ALL_APP_CLIENTS_URL)\n    .then(res => res.json())\n    .then(json => {\n      this.setState({\n        groups:  json.groups,\n        isLoaded: true\n      })\n    });\n\n    fetch(Server_connection.GET_ALL_APP_CLIENTS_URL + `/${UserInfo.UserId}`)\n    .then(res => res.json())\n    .then(json => {\n      this.setState({\n        licenseNumber:  json.licenseNumber,\n        isLoaded: true\n      })\n    });\n\n    fetch(Server_connection.GET_ALL_INTEL_ADMINS_URL)\n    .then(res => res.json())\n    .then(json => {\n      this.setState({\n        intelAdmins:  json.intelAdmins,\n        isLoaded: true\n      })\n    });\n\n    fetch(Server_connection.GET_CLIENT_REPORTS_URL, {\n      method: \"POST\", \n      headers:{\n        'Accept': 'application/json',\n        'Content-Type': 'application/json' \n      },\n      body: JSON.stringify({\"client_id\": `${UserInfo.UserId}`})\n    })\n    .then(res => res.json()) \n    .then(json => {\n        this.setState({\n            value:  json.value,\n            isLoaded: true\n        })\n    });\n\n    fetch(Server_connection.GET_ALL_CLIENT_USERS_URL + `/${UserInfo.ClientId}`)\n    .then(res => res.json())\n    .then(json => {\n      this.setState({\n        clientUsers:  json.clientUsers,\n        isLoaded: true\n      })\n    });\n  }\n\n  render() {\n\n    var date = new Date();\n    var monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \n    \"November\", \"December\"];\n\n    var { branches } = this.state;\n\n    if(UserInfo.UserType == 'IntellAdmin'){\n      const valueToRender = this.state.groups\n      const numOfValue = valueToRender.length\n\n      const intelAdminsToRender = this.state.intelAdmins\n      const numOfIntelAdmins = intelAdminsToRender.length\n\n      return (\n        <div className=\"animated fadeIn\">\n          <Row>\n            <Col xs=\"6\" sm=\"6\" lg=\"6\">\n              <Card className=\"text-white bg-success\">\n                <CardBody className=\"pb-0\">\n                  <ButtonGroup className=\"float-right\">\n                    <ButtonDropdown id='card1' isOpen={this.state.card1} toggle={() => { this.setState({ card1: !this.state.card1 }); }}>\n                      <DropdownToggle caret className=\"p-0\" color=\"transparent\">\n                        <i className=\"icon-diamond\"></i>\n                      </DropdownToggle>\n                    </ButtonDropdown>\n                  </ButtonGroup>\n                  <div className=\"text-value\">{numOfValue}</div>\n                  <div>Registered Clients</div>\n                </CardBody>\n              </Card>\n            </Col>\n  \n            <Col xs=\"6\" sm=\"6\" lg=\"6\">\n              <Card className=\"text-white bg-danger\">\n                <CardBody className=\"pb-0\">\n                  <ButtonGroup className=\"float-right\">\n                    <ButtonDropdown id='card1' isOpen={this.state.card1} toggle={() => { this.setState({ card1: !this.state.card1 }); }}>\n                      <DropdownToggle caret className=\"p-0\" color=\"transparent\">\n                        <i className=\"icon-people\"></i>\n                      </DropdownToggle>\n                    </ButtonDropdown>\n                  </ButtonGroup>\n                  <div className=\"text-value\">{numOfIntelAdmins}</div>\n                  <div>Data Intell Admins</div>\n                </CardBody>\n              </Card>\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <Card>\n                <CardBody>\n                  <DisplayClients/>\n                </CardBody>\n              </Card>\n            </Col>\n          </Row>\n        </div>\n      );\n    }\n    else if(UserInfo.UserType == 'ClientAdmin'){\n      const reportsToRender = this.state.value\n      const numOfReports = reportsToRender.length\n\n      const clientUsersToRender = this.state.clientUsers\n      const numOfClientUsers = clientUsersToRender.length\n\n      var { licenseNumber } = this.state;\n\n      return (\n        <div className=\"animated fadeIn\">\n          <Row>\n            <Col xs=\"6\" sm=\"6\" lg=\"6\">\n              <Card className=\"text-white bg-success\">\n                <CardBody className=\"pb-0\">\n                  <ButtonGroup className=\"float-right\">\n                    <ButtonDropdown id='card1' isOpen={this.state.card1} toggle={() => { this.setState({ card1: !this.state.card1 }); }}>\n                      <DropdownToggle caret className=\"p-0\" color=\"transparent\">\n                        <i className=\"icon-diamond\"></i>\n                      </DropdownToggle>\n                    </ButtonDropdown>\n                  </ButtonGroup>\n                  <div className=\"text-value\">{numOfReports}</div>\n                  <div>Reports</div>\n                </CardBody>\n              </Card>\n            </Col>\n  \n            <Col xs=\"6\" sm=\"6\" lg=\"6\">\n              <Card className=\"text-white bg-danger\">\n                <CardBody className=\"pb-0\">\n                  <ButtonGroup className=\"float-right\">\n                    <ButtonDropdown id='card1' isOpen={this.state.card1} toggle={() => { this.setState({ card1: !this.state.card1 }); }}>\n                      <DropdownToggle caret className=\"p-0\" color=\"transparent\">\n                        <i className=\"icon-people\"></i>\n                      </DropdownToggle>\n                    </ButtonDropdown>\n                  </ButtonGroup>\n                  <div className=\"text-value\">{numOfClientUsers} / {licenseNumber}</div>\n                  <div>Users</div>\n                </CardBody>\n              </Card>\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <Card>\n                <CardBody>\n                  <DisplayClientReports/>\n                </CardBody>\n              </Card>\n            </Col>\n          </Row>\n        </div>\n      );\n    }\n    else if(UserInfo.UserType == 'ClientUser'){\n      return (\n        <div className=\"animated fadeIn\">\n          <Row>\n            <Col>\n              <Card>\n                <CardBody>\n                  <UserReports/>\n                </CardBody>\n              </Card>\n            </Col>\n          </Row>\n        </div>\n      );\n    }\n  }\n}\n\nexport default Dashboard;\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport './Spinner.css'\n\nexport default function Spinner({ color, className, style }) {\n    const circles = [...Array(12)].map((_, index) => {\n        return (\n            <div key={index}>\n                <div className=\"div-after\" style={{ background: color }}></div>\n            </div>\n        )\n    })\n\n    return (\n        <div className={`lds-spinner ${className}`} style={{ ...style }}>\n            {circles}\n        </div>\n    )\n}\n\nSpinner.propTypes = {\n    /** hex color */\n    color: PropTypes.string,\n    /** class name  */\n    className: PropTypes.string,\n    /** style object */\n    style: PropTypes.object,\n}\n\nSpinner.defaultProps = {\n    color: '#FF4500',\n    className: '',\n    style: {},\n}"],"names":["Url","BASE_URL","Server_connection","ADMIN_SIGN_UP_URL","ADMIN_LOGIN_URL","ADD_NEW_CLIENT_URL","CLIENT_ADMIN_SIGN_UP_URL","CLIENT_ADMIN_LOGIN_URL","GET_ALL_CLIENTS_URL","GET_ALL_APP_CLIENTS_URL","DELETE_CLIENT_INFO_URL","GET_CLIENT_REPORTS_URL","ADD_CLIENT_USER_URL","UPDATE_CLIENT_INFO_URL","UPDATE_CLIENT_USER_INFO_URL","DELETE_CLIENT_USER_INFO_URL","GET_ALL_CLIENT_USERS_URL","ASSIGN_REPORTS_TO_USERS_URL","GET_ALL_ASIGNED_REPORTS_URL","DELETE_ASSIGNMENT_INFO_URL","ACCESS_TOKEN_URL","GET_ALL_INTEL_ADMINS_URL","CHANGE_PASSWORD","FORGOT_PASSWORD_URL","RESET_PASSWORD_URL","token","localStorage","IntellUserToken","decoded","jwt_decode","Client_id","client_id","Email","email","Id","id","Name","username","Status","user_status","Type","user_type","UserInfo","UserEmail","UserId","UserName","UserType","UserStatus","ClientId","ViewReportsModel","props","handleSearchInput","e","setState","searchItem","target","value","state","embedUrl","access_token","message","isLoaded","onChange","bind","this","name","nextProps","fetch","then","res","json","console","log","size","centered","closeButton","className","accessToken","PowerBIEmbed","embedConfig","type","tokenType","models","settings","panes","filters","expanded","visible","eventHandlers","Map","event","detail","cssClassName","getEmbeddedComponent","embeddedReport","window","report","Component","DisplayClients","groups","addModalShow","editModalShow","handleRefreshButton","preventDefault","location","reload","items","filteredItem","ActivityName","ActivityStartDate","ActivityEndDate","ActivityVenue","ActivityDescription","Leader","LeaderContact","filter","item","client_name","toLowerCase","includes","placeholder","class","Table","hover","responsive","map","index","key","country","license_number","license_expiryDate","contract_number","contract_startDate","contract_endDate","client_status","Spinner","AssignReportModal","report_id","report_name","user_email","clientUsers","handleUpdateItem","assignReportToUser","method","headers","body","JSON","stringify","result","error","counties","districts","Modal","FormGroup","row","Col","xs","Label","htmlFor","Input","readOnly","y","Button","block","color","onClick","onHide","DisplayClientReports","assignModalShow","viewReportsModalShow","EmbedUrl","ReportName","Link","to","pathname","show","date","Date","UserReports","getFullYear","getMonth","slice","getDate","reports","viewReportModalShow","supportModalShow","downloadModalShow","onSubmit","logOut","removeItem","clear","history","push","Code","Container","Form","property","updated_at","withRouter","brandPrimary","getStyle","brandSuccess","brandInfo","brandDanger","cardChartData1","label","backgroundColor","borderColor","data","cardChartData2","CustomTooltips","Math","min","apply","max","random","floor","data1","data2","data3","i","hexToRgba","ceil","Dashboard","loading","toggle","onRadioBtnClick","dropdownOpen","radioSelected","licenseNumber","intelAdmins","branches","numOfValue","length","numOfIntelAdmins","Row","sm","lg","Card","CardBody","ButtonGroup","ButtonDropdown","isOpen","card1","DropdownToggle","caret","numOfReports","numOfClientUsers","style","circles","Array","_","background","defaultProps"],"sourceRoot":""}