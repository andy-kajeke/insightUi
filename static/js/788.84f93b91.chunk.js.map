{"version":3,"file":"static/js/788.84f93b91.chunk.js","mappings":"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","sources":["constants/constants.js","constants/credentials.js","views/Configurations/DeleteClientUserReport.js","views/Configurations/AssignmentList.js","views/Configurations/Assignments.js","views/Configurations/ViewReportsModel.js","views/Loaders/Spinner.js"],"sourcesContent":["\nclass Url {\n    //static BASE_URL = \"http://localhost:1110/api/\";\n\n    static BASE_URL = \"https://insightbackendservice.azurewebsites.net/api/\"\n\n    //static BASE_URL = \"https://services.data-intell.co.uk/api/\";\n}\n\nclass Server_connection {\n\n    static ADMIN_SIGN_UP_URL = Url.BASE_URL + \"users/create_account\";\n\n    static ADMIN_LOGIN_URL = Url.BASE_URL + \"users/login\";\n\n    static ADD_NEW_CLIENT_URL = Url.BASE_URL + \"users/client/register\";\n\n    static CLIENT_ADMIN_SIGN_UP_URL = Url.BASE_URL + \"users/client/create_account\";\n\n    static CLIENT_ADMIN_LOGIN_URL = Url.BASE_URL + \"users/clientAdmin/login\";\n\n    static GET_ALL_CLIENTS_URL = Url.BASE_URL + \"users/clients\";\n\n    static GET_ALL_APP_CLIENTS_URL = Url.BASE_URL + \"users/clients_only\";\n\n    static DELETE_CLIENT_INFO_URL = Url.BASE_URL + \"users/delete/clientInfo\";\n\n    static GET_CLIENT_REPORTS_URL = Url.BASE_URL + \"users/client/reports\";\n\n    static ADD_CLIENT_USER_URL = Url.BASE_URL + \"users/clientUser/register\";\n\n    static UPDATE_CLIENT_INFO_URL = Url.BASE_URL + \"users/update/clientInfo\";\n\n    static UPDATE_CLIENT_USER_INFO_URL = Url.BASE_URL + \"users/update/clientUsersInfo\";\n\n    static DELETE_CLIENT_USER_INFO_URL = Url.BASE_URL + \"users/clientUser/deleteInfo\";\n\n    static GET_ALL_CLIENT_USERS_URL = Url.BASE_URL + \"users/clientUsers\";\n\n    static ASSIGN_REPORTS_TO_USERS_URL = Url.BASE_URL + \"users/client_reports/assignReports\";\n\n    static GET_ALL_ASIGNED_REPORTS_URL = Url.BASE_URL + \"users/client_reports/assignments\";\n\n    static DELETE_ASSIGNMENT_INFO_URL = Url.BASE_URL + \"users/client_reports/assignments/deleteInfo\"\n\n    static ACCESS_TOKEN_URL = Url.BASE_URL + \"users/accessToken\";\n\n    static GET_ALL_INTEL_ADMINS_URL = Url.BASE_URL + \"users/intelAdmins\";\n\n    static CHANGE_PASSWORD = Url.BASE_URL + \"users/intelAdmin/change_password/\";\n\n    static FORGOT_PASSWORD_URL = Url.BASE_URL + \"users/intelAdmin/forgot_password\";\n\n    static RESET_PASSWORD_URL = Url.BASE_URL + \"users/intelAdmin/reset_password\";\n}\n\nexport default Server_connection;","import jwt_decode from 'jwt-decode';\n\nconst token = localStorage.IntellUserToken;\nconst decoded = jwt_decode(token);\n\nlet Client_id = decoded.client_id;\nlet Email = decoded.email;\nlet Id = decoded.id;\nlet Name = decoded.username;\nlet Status = decoded.user_status;\nlet Type = decoded.user_type\n\nclass UserInfo {\n\n    static UserEmail = Email;\n\n    static UserId = Id;\n\n    static UserName = Name;\n\n    static UserType = Type;\n\n    static UserStatus = Status;\n\n    static ClientId = Client_id;\n\n}\n\nexport default UserInfo;","import React, { Component } from 'react';\nimport {Modal, Button,} from 'react-bootstrap'\nimport {Col,FormGroup,Input,Select,Label,Row,} from 'reactstrap';\n//import Spinner from '../../Loaders/Spinner'\nimport './ModalStylee.css'\nimport Feedback from 'react-bootstrap/Feedback';\nimport Server_connection from '../../constants/constants';\nimport UserInfo from '../../constants/credentials'\n\nclass DeleteClientUserReports extends Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        id: '',\n        report_name: '',\n        username: '',\n        message: '',\n        isLoaded: false,\n      }\n      this.handleUpdateItem = this.handleUpdateItem.bind(this);\n      this.onChange = this.onChange.bind(this);\n    }\n\n    onChange(e){\n      this.setState({[e.target.name]: e.target.value});\n      //console.log({[e.target.name]: e.target.value});\n    }\n\n    componentWillReceiveProps(nextProps){\n        this.setState({\n            id: nextProps.id,\n            report_name: nextProps.report_name,\n            username: nextProps.username\n        })\n    }\n\n    handleUpdateItem(e){\n      e.preventDefault();\n\n      const removeAssignmentData = {\n        id: this.state.id\n      };\n\n      console.log(removeAssignmentData);\n\n      fetch(Server_connection.DELETE_ASSIGNMENT_INFO_URL + `/${this.state.id}`,{\n        method: 'DELETE',\n      })\n      .then(res => res.json())\n      .then((result) =>{\n        this.setState({message : result.message, isLoaded : true})\n        console.log([this.state.message])\n      },\n      (error) => {\n        this.setState({message : 'Failed.. Try again!!'})\n      });\n    }\n\n    render() {\n        var { counties, districts, members} = this.state;\n        return (\n            <Modal {...this.props} size=\"md\" aria-labelledby=\"contained-modal-title-vcenter\" centered id=\"exampleModal\">\n              <Modal.Header closeButton>\n                <Modal.Title id=\"contained-modal-title-vcenter\">\n                  <div className=\"modal-title\">Remove Assignment </div>\n                </Modal.Title>\n              </Modal.Header>\n              <Modal.Body>\n                <FormGroup row className=\"my-0\">\n                  <Col xs=\"12\">\n                    <FormGroup>\n                      <Label htmlFor=\"\" className=\"lable\">{this.state.report_name}</Label>\n                    </FormGroup>\n                  </Col>\n                  <Col xs=\"12\">\n                    <FormGroup>\n                      <Label htmlFor=\"\" className=\"lable\">Are you sure you want to delete or remove this assignment from {this.state.username}?</Label>\n                    </FormGroup>\n                  </Col>\n                </FormGroup>\n                <hr/>\n                <span className='modal-alert'>{this.state.message }</span>\n              </Modal.Body>\n              <Modal.Footer>\n                <div className=\"d-inline\">\n                  <Button block color=\"danger\" size=\"sm\" className=\"btn-pill bg-danger\" onClick={this.props.onHide}>NO</Button>\n                </div>\n                <div className=\"d-inline\">\n                  <Button block color=\"success\" size=\"sm\" className=\"btn-pill bg-success\" onClick={this.handleUpdateItem}>YES</Button>\n                </div>\n              </Modal.Footer>\n            </Modal>\n          );\n    }\n}\n\nexport default DeleteClientUserReports;","import React, {Component} from 'react';\nimport {Button, Badge, Table, Col, Row, Label } from 'reactstrap';\nimport { Link, NavLink, withRouter } from 'react-router-dom';\nimport Server_connection from '../../constants/constants'  \nimport Spinner from '../Loaders/Spinner'\nimport './config.scss'\nimport UserInfo from '../../constants/credentials'\nimport ViewReportsModel from './ViewReportsModel'\nimport DeleteClientUserReports from './DeleteClientUserReport'\n\nclass AssignmentList extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n          reports: [],\n          isLoaded: false,\n          searchItem: '',\n          addModalShow: false,\n          deleteModalShow: false,\n          reportsModalShow: false\n        }\n        this.handleRefreshButton = this.handleRefreshButton.bind(this);\n    }\n\n    handleSearchInput = (e) => {\n      this.setState({ searchItem: e.target.value})\n    }\n\n    handleRefreshButton(e){\n        e.preventDefault();\n        //this.props.history.push('/geographics')\n        window.location.reload(false);\n      }\n\n    componentDidMount(){\n        fetch(Server_connection.GET_ALL_ASIGNED_REPORTS_URL + `/${UserInfo.ClientId}`) \n        .then(res => res.json())\n        .then(json => {\n          this.setState({\n            reports:  json.reports,\n            isLoaded: true\n          })\n        })\n    }\n\n    render(){\n      var { isLoaded, reports } = this.state;\n      const {Id, ReportId, EmbedUrl, ReportName, UserName} = this.state\n\n      let addModalClose = () => this.setState({addModalShow : false});\n      let deleteModalClose = () => this.setState({deleteModalShow : false});\n      let reportsModalClose = () => this.setState({reportsModalShow : false});\n\n      let filteredItem = reports.filter((item) => {\n        return item.report_name.toLowerCase().includes(this.state.searchItem.toLowerCase());\n      });\n\n      if(!isLoaded){\n        return <div className='spinner'><Spinner/></div>\n      }\n      else{\n        return(\n          <div>\n              <div className=\"\">\n                    <Button className=\"btn-pill btn-success btn-space\" size=\"sm\" onClick = {this.handleRefreshButton}>\n                         <strong><i class=\"icon-refresh\"></i> Refresh</strong>\n                    </Button>\n                  <form className=\"form-inline mr-auto formRight active-pink-3 active-pink-4\">\n                      <input className=\"form-control mr-sm-2\" type=\"text\" placeholder=\"Search by Report Name\" aria-label=\"Search\" \n                      onChange={this.handleSearchInput}/>\n                      {/* <button className=\"btn-pill btn-success\" type=\"submit\">Search</button> */}\n                      <i class=\"icon-search\" aria-hidden=\"true\"></i>\n                  </form>\n              </div><hr/>\n              <div className=\"parentDiv2\">\n              <Table hover responsive className=\"table-outline mb-0 d-none d-sm-table\">\n                <thead className=\"thead-light\">\n                    <tr>\n                        {/* <th className=\"text-center\"><i className=\"icon-picture\"></i></th> */}\n                        {/* <th>Client ID</th> */}\n                        <th>Report Name</th>\n                        <th>Assigned To</th>\n                        <th>Email</th>\n                        <th>Date and Time</th>\n                        <th></th>\n                        <th>Actions</th>\n                    </tr>\n                </thead>\n                <tbody>\n                {filteredItem.map((item, index) => (\n                <tr key={ index }>\n                  {/* <td>\n                    <div>{item.client_id}</div>\n                  </td> */}\n                  <td>\n                    <div>{item.report_name}</div>\n                  </td>\n                  <td>\n                    <div>{item.username}</div>\n                  </td>\n                  <td>\n                    <div>{item.user_email}</div>\n                  </td>\n                  <td>\n                    <div>{item.updated_at}</div>\n                  </td>\n                  <td>\n                    <div></div>\n                  </td>\n                  <td>\n                  <div>\n                  <Label block color=\"info\" size=\"sm\" className=\"btn-pill bg-success btn-space\" \n                      ><Link to={{pathname:\"/assigned_report\", embedUrl: item.embedUrl, id: item.report_id}} \n                      ><strong className=\"actionLink\">View Report</strong></Link></Label>\n\n                    <Label block color=\"info\" size=\"sm\" className=\"btn-space btn-pill bg-danger\"\n                    onClick={() => { this.setState({deleteModalShow: true, \n                    Id: item.id, ReportName: item.report_name, UserName: item.username})\n                    }}><strong className=\"action\">Remove</strong></Label>\n                  </div>\n                  </td>\n                </tr>\n                ))}\n                </tbody>\n              </Table>\n          </div>\n          <ViewReportsModel\n            id = {ReportId}\n            embedUrl = {EmbedUrl}\n            show = {this.state.reportsModalShow}\n            onHide = {reportsModalClose}/>\n\n          <DeleteClientUserReports\n            id = {Id}\n            report_name = {ReportName}\n            username = {UserName}\n            show = {this.state.deleteModalShow}\n            onHide = {deleteModalClose}/>\n          </div>\n      );\n      }\n    }\n}\n\nexport default AssignmentList;","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport classNames from 'classnames';\nimport { Row, Col } from 'reactstrap'\nimport { rgbToHex } from '@coreui/coreui/dist/js/coreui-utilities'\nimport AssignmentList from './AssignmentList'\n\nclass ThemeView extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      bgColor: 'rgb(255, 255, 255)'\n    }\n  }\n\n  componentDidMount () {\n    const elem = ReactDOM.findDOMNode(this).parentNode.firstChild\n    const color = window.getComputedStyle(elem).getPropertyValue('background-color')\n    this.setState({\n      bgColor: color || this.state.bgColor\n    })\n  }\n\n  render() {\n\n    return (\n      <table className=\"w-100\">\n        <tbody>\n        <tr>\n          <td className=\"text-muted\">HEX:</td>\n          <td className=\"font-weight-bold\">{ rgbToHex(this.state.bgColor) }</td>\n        </tr>\n        <tr>\n          <td className=\"text-muted\">RGB:</td>\n          <td className=\"font-weight-bold\">{ this.state.bgColor }</td>\n        </tr>\n        </tbody>\n      </table>\n    )\n  }\n}\n\nclass ThemeColor extends Component {\n  // constructor(props) {\n  //   super(props);\n  // }\n  render() {\n\n    // const { className, children, ...attributes } = this.props\n    const { className, children } = this.props\n\n    const classes = classNames(className, 'theme-color w-75 rounded mb-3')\n\n    return (\n      <Col xl=\"2\" md=\"4\" sm=\"6\" xs=\"12\" className=\"mb-4\">\n        <div className={classes} style={{paddingTop: '75%'}}></div>\n        {children}\n        <ThemeView/>\n      </Col>\n    )\n  }\n}\n\nclass Assignments extends Component {\n  render() {\n    return (\n      <div className=\"animated fadeIn\">\n        <div className=\"card\">\n          <div className=\"card-header\">\n            <i className=\"fa fa-file-text\"></i> Assignment List\n          </div>\n          <div className=\"card-body\">\n            <AssignmentList/>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Assignments;\n","import React, { Component } from 'react';\nimport {Modal, Button,} from 'react-bootstrap'\nimport {Col,FormGroup,Input,Select,Label,Row, Table} from 'reactstrap';\nimport './ModalStylee.css';\nimport { PowerBIEmbed } from 'powerbi-client-react';\nimport { models } from 'powerbi-client';\nimport qs from 'querystring';\nimport Server_connection from '../../constants/constants';\n\nclass ViewReportsModel extends Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        id:'',\n        embedUrl: '',\n        access_token: '',\n        value: [],\n        message: '',\n        searchItem: '',\n        isLoaded: false,\n      }\n      //this.handleUpdateItem = this.handleUpdateItem.bind(this);\n      this.onChange = this.onChange.bind(this);\n    }\n\n    onChange(e){\n      this.setState({[e.target.name]: e.target.value});\n      //console.log({[e.target.name]: e.target.value});\n    }\n\n    componentWillReceiveProps(nextProps){\n        this.setState({\n            id: nextProps.id,\n            embedUrl: nextProps.embedUrl\n        })\n    }\n\n    handleSearchInput = (e) => {\n        this.setState({ searchItem: e.target.value})\n    }\n\n    componentDidMount(){\n        fetch(Server_connection.ACCESS_TOKEN_URL)\n        .then(res => res.json())\n        .then(json => {\n          this.setState({\n            access_token:  json.access_token,\n            isLoaded: true\n          })\n        })\n    }\n\n    render() {\n        console.log(this.state.access_token)\n        return (\n            <Modal {...this.props} size=\"xl\"  centered id=\"exampleModal\">\n              <Modal.Header closeButton>\n                <Modal.Title id=\"contained-modal-title-vcenter\">\n                  <div className=\"modal-title\">Report {this.state.accessToken}</div>\n                </Modal.Title>\n              </Modal.Header>\n              <Modal.Body>\n                <PowerBIEmbed\n\t                embedConfig = {{\n\t\t                type: 'report',   // Supported types: report, dashboard, tile, visual and qna\n\t\t                id: `${this.state.id}`,\n\t\t                embedUrl: `${this.state.embedUrl}`,\n\t\t                accessToken: `${this.state.access_token}`,\n\t\t                tokenType: models.TokenType.Aad,\n\t\t                settings: {\n\t\t\t                panes: {\n\t\t\t\t                filters: {\n\t\t\t\t\t                expanded: false,\n\t\t\t\t\t                visible: false\n\t\t\t\t                }\n\t\t\t                },\n\t\t\t                // background: models.BackgroundType.Transparent,\n\t\t                }\n\t                }}\n\n\t                eventHandlers = { \n\t\t                new Map([\n\t\t\t                ['loaded', function () {console.log('Report loaded');}],\n\t\t\t                ['rendered', function () {console.log('Report rendered');}],\n\t\t\t                ['error', function (event) {console.log(event.detail);}]\n\t\t                ])\n\t                }\n\t\t\n\t                cssClassName = { \"Embed-container\" }\n\n\t                getEmbeddedComponent = { (embeddedReport) => {\n\t\t                window.report = embeddedReport;\n\t                }}\n                />\n              </Modal.Body>\n              {/* <Modal.Footer>\n                <div className=\"d-inline\">\n                  <Button block color=\"danger\" size=\"sm\" className=\"btn-pill bg-danger\" onClick={this.props.onHide}>Close</Button>\n                </div>\n                <div className=\"d-inline\">\n                  <Button block color=\"success\" size=\"sm\" className=\"btn-pill bg-success\" onClick={this.handleUpdateItem}>Display Reports</Button>\n                </div>\n              </Modal.Footer> */}\n            </Modal>\n          );\n    }\n}\n\nexport default ViewReportsModel;","import React from 'react'\nimport PropTypes from 'prop-types'\nimport './Spinner.css'\n\nexport default function Spinner({ color, className, style }) {\n    const circles = [...Array(12)].map((_, index) => {\n        return (\n            <div key={index}>\n                <div className=\"div-after\" style={{ background: color }}></div>\n            </div>\n        )\n    })\n\n    return (\n        <div className={`lds-spinner ${className}`} style={{ ...style }}>\n            {circles}\n        </div>\n    )\n}\n\nSpinner.propTypes = {\n    /** hex color */\n    color: PropTypes.string,\n    /** class name  */\n    className: PropTypes.string,\n    /** style object */\n    style: PropTypes.object,\n}\n\nSpinner.defaultProps = {\n    color: '#FF4500',\n    className: '',\n    style: {},\n}"],"names":["Url","BASE_URL","Server_connection","ADMIN_SIGN_UP_URL","ADMIN_LOGIN_URL","ADD_NEW_CLIENT_URL","CLIENT_ADMIN_SIGN_UP_URL","CLIENT_ADMIN_LOGIN_URL","GET_ALL_CLIENTS_URL","GET_ALL_APP_CLIENTS_URL","DELETE_CLIENT_INFO_URL","GET_CLIENT_REPORTS_URL","ADD_CLIENT_USER_URL","UPDATE_CLIENT_INFO_URL","UPDATE_CLIENT_USER_INFO_URL","DELETE_CLIENT_USER_INFO_URL","GET_ALL_CLIENT_USERS_URL","ASSIGN_REPORTS_TO_USERS_URL","GET_ALL_ASIGNED_REPORTS_URL","DELETE_ASSIGNMENT_INFO_URL","ACCESS_TOKEN_URL","GET_ALL_INTEL_ADMINS_URL","CHANGE_PASSWORD","FORGOT_PASSWORD_URL","RESET_PASSWORD_URL","token","localStorage","IntellUserToken","decoded","jwt_decode","Client_id","client_id","Email","email","Id","id","Name","username","Status","user_status","Type","user_type","UserInfo","UserEmail","UserId","UserName","UserType","UserStatus","ClientId","DeleteClientUserReports","props","state","report_name","message","isLoaded","handleUpdateItem","bind","onChange","e","this","setState","target","name","value","nextProps","preventDefault","removeAssignmentData","console","log","fetch","method","then","res","json","result","error","counties","districts","members","Modal","size","centered","closeButton","className","FormGroup","row","Col","xs","Label","htmlFor","block","color","onClick","onHide","Component","AssignmentList","handleSearchInput","searchItem","reports","addModalShow","deleteModalShow","reportsModalShow","handleRefreshButton","window","location","reload","ReportId","EmbedUrl","ReportName","filteredItem","filter","item","toLowerCase","includes","Button","class","type","placeholder","Table","hover","responsive","map","index","key","user_email","updated_at","Link","to","pathname","embedUrl","report_id","ViewReportsModel","show","DeleteClientUserReport","Spinner","ThemeView","bgColor","elem","ReactDOM","parentNode","firstChild","getComputedStyle","getPropertyValue","rgbToHex","Assignments","access_token","accessToken","PowerBIEmbed","embedConfig","tokenType","models","settings","panes","filters","expanded","visible","eventHandlers","Map","event","detail","cssClassName","getEmbeddedComponent","embeddedReport","report","style","circles","Array","_","background","defaultProps"],"sourceRoot":""}